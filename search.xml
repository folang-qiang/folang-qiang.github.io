<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>postgres、pgpool设置优化</title>
      <link href="/2018/03/08/2018-03-08-postgres%E3%80%81pgpool%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
      <url>/2018/03/08/2018-03-08-postgres%E3%80%81pgpool%E8%AE%BE%E7%BD%AE%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="postgres、pgpool设置优化"><a href="#postgres、pgpool设置优化" class="headerlink" title="postgres、pgpool设置优化"></a>postgres、pgpool设置优化</h2><h3 id="listen-backlog-multiplier"><a href="#listen-backlog-multiplier" class="headerlink" title="listen_backlog_multiplier"></a>listen_backlog_multiplier</h3><pre><code>控制连接队列的长度，默认2， 队列长度由 listen_backlog_multiplier * num_init_children 定义。</code></pre><h3 id="num-init-children"><a href="#num-init-children" class="headerlink" title="num_init_children"></a>num_init_children</h3><pre><code>支持的最大并发连接数如果超过 num_init_children，它们将被阻塞，最多有 2*num_init_children 可以被放入等待队列。队列长度 = num_init_children*listen_backlog_multiplier，队列长度达到这个数值，可能发生以下问题：    1) 连接到 pgpool-II 失败    2) 连接到 pgpool-II 的时间变长pacer最大连接数：6000（1500+1500*3）ccl最大连接数：2250（750+750*2）pacer不够用，所以增加到1500，ccl连接够用，没有增加的必要。</code></pre><h3 id="allow-sql-comments"><a href="#allow-sql-comments" class="headerlink" title="allow_sql_comments"></a>allow_sql_comments</h3><pre><code>是否忽略Nobalance SQL注释,Off、NObalance追加無効。</code></pre><h3 id="sr-check-period"><a href="#sr-check-period" class="headerlink" title="sr_check_period"></a>sr_check_period</h3><pre><code>多久检查一次，单位为秒如果设置为10s，出现主备机数据不一致，则10s内不访问备机。如果数据变化量大，可以把检查间隔设成3s。</code></pre><h3 id="max-connections"><a href="#max-connections" class="headerlink" title="max_connections"></a>max_connections</h3><pre><code>根据用户并发访问数量来决定。过小用户无法连接，过大浪费服务器资源。</code></pre><h3 id="synchronous-commit"><a href="#synchronous-commit" class="headerlink" title="synchronous_commit"></a>synchronous_commit</h3><pre><code>控制事务提交模式和备机的同期模式，同步模式有效。</code></pre><h3 id="wal-keep-segments"><a href="#wal-keep-segments" class="headerlink" title="wal_keep_segments"></a>wal_keep_segments</h3><pre><code>主备同期，主机数据先放到wal，wal的容量 = 16M*wal_keep_segments。如果从备份开始到备份结束，数据变化量超过16M*wal_keep_segments，可以调整wal_keep_segments的大小。</code></pre><h3 id="max-standby-streaming-delay"><a href="#max-standby-streaming-delay" class="headerlink" title="max_standby_streaming_delay"></a>max_standby_streaming_delay</h3><pre><code>主备机数据不一致，备机等待数据一致后，再处理，max_standby_streaming_delay设置等待时间。</code></pre><h3 id="shared-buffers"><a href="#shared-buffers" class="headerlink" title="shared_buffers"></a>shared_buffers</h3><pre><code>数据库共享内存，建议物理内存/4。</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AndroidStudio升级到3.0，打不开2.0的项目</title>
      <link href="/2018/02/27/2018-02-27-AndroidStudio%E5%8D%87%E7%BA%A7%E5%88%B03.0%EF%BC%8C%E6%89%93%E4%B8%8D%E5%BC%802.0%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
      <url>/2018/02/27/2018-02-27-AndroidStudio%E5%8D%87%E7%BA%A7%E5%88%B03.0%EF%BC%8C%E6%89%93%E4%B8%8D%E5%BC%802.0%E7%9A%84%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h3 id="AndroidStudio升级到3-0，打不开2-0的项目"><a href="#AndroidStudio升级到3-0，打不开2-0的项目" class="headerlink" title="AndroidStudio升级到3.0，打不开2.0的项目"></a>AndroidStudio升级到3.0，打不开2.0的项目</h3><pre><code>1.找一个能运行的as项目2.对比这两个项目的build.gradle、gradle-wrapper.properties    gradle-wrapper.properties的文件目录：项目/gradle/wrapper/gradle-wrapper.properties3.修改成可用的版本4.重新导入项目</code></pre>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>postgres 查询优化</title>
      <link href="/2018/02/09/2018-02-09-postgres%20%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2018/02/09/2018-02-09-postgres%20%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="一、函数优化"><a href="#一、函数优化" class="headerlink" title="一、函数优化"></a>一、函数优化</h2><h3 id="1-PostgreSQL-explain-Plan-Rows快速估算结果集数量"><a href="#1-PostgreSQL-explain-Plan-Rows快速估算结果集数量" class="headerlink" title="1.PostgreSQL explain Plan Rows快速估算结果集数量"></a>1.PostgreSQL explain Plan Rows快速估算结果集数量</h3><p><img src="https://raw.githubusercontent.com/zhangyongguang/zhangyongguang.github.io/master/img/plan1.png" alt=""></p><p>总花费：333297</p><p>Full scan ccl_reply：100144</p><p>Full scan ccl_topics：118671</p><p>Full scan ccl_reply：96987</p><h3 id="2-调查分析-amp-改善"><a href="#2-调查分析-amp-改善" class="headerlink" title="2.调查分析&amp;改善"></a>2.调查分析&amp;改善</h3><p>ccl_topics的topiccreatercd、CCL_Reply的ToReplierCD作为join条件没有索引，导致全表扫描，浪费大量时间。</p><p>增加topiccreatercd索引、CCL_Reply增加ToReplierCD索引。</p><h3 id="3-explain-Plan-Rows快速估算结果集数量"><a href="#3-explain-Plan-Rows快速估算结果集数量" class="headerlink" title="3.explain Plan Rows快速估算结果集数量"></a>3.explain Plan Rows快速估算结果集数量</h3><p><img src="https://raw.githubusercontent.com/zhangyongguang/zhangyongguang.github.io/master/img/plan2.png" alt=""></p><p>总花费：13902</p><p>改善前：333297，提高24倍。</p><h3 id="4-改善效果"><a href="#4-改善效果" class="headerlink" title="4.改善效果"></a>4.改善效果</h3><p><img src="https://raw.githubusercontent.com/zhangyongguang/zhangyongguang.github.io/master/img/plan3.png" alt=""></p><h2 id="二、PostgreSQL-explain-Plan-Rows-使用"><a href="#二、PostgreSQL-explain-Plan-Rows-使用" class="headerlink" title="二、PostgreSQL explain Plan Rows 使用"></a>二、PostgreSQL explain Plan Rows 使用</h2><p><img src="https://raw.githubusercontent.com/zhangyongguang/zhangyongguang.github.io/master/img/plan4.png" alt=""></p><h2 id="三、增加索引，带来的影响"><a href="#三、增加索引，带来的影响" class="headerlink" title="三、增加索引，带来的影响"></a>三、增加索引，带来的影响</h2><p>1.默认情况下，增加索引过程中，无法写入。</p><pre><code>100万数据量下，15s左右</code></pre><p>2.创建索引后，系统必须保持索引与数据表的同步。增加数据写入的开销。</p><p><img src="https://raw.githubusercontent.com/zhangyongguang/zhangyongguang.github.io/master/img/plan5.png" alt=""></p><pre><code>增加索引后，查询1000次，速度提高；查询1、100次，速度降低，服务器状态对查询速度影响更大。增加索引对查询速度无明显影响。增加索引后，插入1、100次，速度提高；插入1000次，速度降低，服务器状态对插入速度影响更大。增加索引对插入速度无明显影响。</code></pre><p><img src="https://raw.githubusercontent.com/zhangyongguang/zhangyongguang.github.io/master/img/plan6.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>postgres sqlserver数据类型对比</title>
      <link href="/2018/02/07/2018-02-07-postgres%20sqlserver%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94/"/>
      <url>/2018/02/07/2018-02-07-postgres%20sqlserver%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<table><thead><tr><th>数据类型</th><th>SQL Server</th><th>PostgreSQL</th><th>备注</th></tr></thead><tbody><tr><td>数字型</td></tr><tr><td></td><td>tinyint</td><td>smallint</td><td>tinyint(0-255),smallint(-32768-32767)</td></tr><tr><td></td><td>smallint</td><td>smallint,int2</td><td>int2是smallint别名</td></tr><tr><td></td><td>int</td><td>int</td></tr><tr><td></td><td>bigint</td><td>bigint</td></tr><tr><td></td><td>decimal</td><td>decimal</td></tr><tr><td></td><td>numeric</td><td>numeric</td></tr><tr><td></td><td>float</td><td>real,float4</td></tr><tr><td></td><td>real</td><td>double precision</td></tr><tr><td>字符型</td></tr><tr><td></td><td>char</td><td>char</td><td>postgresql可以存储n个字符</td></tr><tr><td></td><td>nchar</td><td>char</td></tr><tr><td></td><td>nvarchar</td><td>varchar</td></tr><tr><td></td><td>varchar</td><td>varchar</td></tr><tr><td></td><td>text</td><td>text</td></tr><tr><td></td><td>ntext</td><td>text</td></tr><tr><td>时间</td></tr><tr><td></td><td>datetime</td><td>date</td><td>只是时间</td></tr><tr><td></td><td>datetime</td><td>timestamp</td><td>时间与日期</td></tr><tr><td>货币</td></tr><tr><td></td><td>money</td><td>numeric</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5 安装nfs</title>
      <link href="/2018/02/07/2018-02-07-centos6.5%20%E5%AE%89%E8%A3%85nfs/"/>
      <url>/2018/02/07/2018-02-07-centos6.5%20%E5%AE%89%E8%A3%85nfs/</url>
      <content type="html"><![CDATA[<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre><code># 创建用户useradd -d /home/share -m share -s /bin/bash# 查看用户idcat /etc/passwd | grep share# 配置nfs文件vi /etc/exports    /sharefiles/  172.17.3.0/24(rw,sync,all_squash,anonuid=502,anongid=502)# 配置生效exportfs -r# 创建共享目录mkdir -p /sharefiles/pacerfiles/NewProdPosWSchown -R share:share /sharefiles# 启动/重启服务chkconfig nfs onservice rpcbind restartservice nfs start</code></pre><h3 id="服务端-客户端"><a href="#服务端-客户端" class="headerlink" title="服务端/客户端"></a>服务端/客户端</h3><pre><code>#创建共享目录mkdir /sharefileslink#测试挂载showmount -e 172.17.3.186Export list for 172.17.3.186:/sharefiles 172.17.3.0/24#挂载mount -t nfs 172.17.3.186:/sharefiles /sharefileslink#解除挂载umount /sharefileslink#建立linkln -s /sharefileslink/pacerfiles/NewProdPosWS /opt/newProdPos</code></pre>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>postgres sqlserver常用函数对比</title>
      <link href="/2018/02/07/2018-02-07-postgres%20sqlserver%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/"/>
      <url>/2018/02/07/2018-02-07-postgres%20sqlserver%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<h3 id="1-字符串转换"><a href="#1-字符串转换" class="headerlink" title="1.字符串转换"></a>1.字符串转换</h3><pre><code>#字符串转时间CONVERT(DATETIME, &apos;&apos;1900-01-01 00:00:00&apos;&apos;, 102)to_timestamp(&apos;1900-01-01 00:00:00.000&apos;,&apos;YYYY-mm-dd HH24:MI:SS.MS&apos;)#时间转字符串convert(varchar(10),getdate(),120)to_char(current_timestamp, &apos;yyyy-mm-dd HH24:MI:SS.MS&apos;);#字符串转数字convert(int,&apos;3&apos;)to_number(string,&apos;9&apos;)#数字转字符串convert(varchar(5),3)to_char(ReasonNo, &apos;9999999999&apos;)</code></pre><h3 id="2-分割字符串"><a href="#2-分割字符串" class="headerlink" title="2.分割字符串"></a>2.分割字符串</h3><pre><code>#取右侧字符串RIGHT(@BranchCD_1,4)substring(BranchCD_1 from &apos;....$&apos;);1个.代表一位#去空格trim(strSQL)btrim(strSQL, &apos; &apos;)</code></pre><h3 id="3-大小写转换"><a href="#3-大小写转换" class="headerlink" title="3.大小写转换"></a>3.大小写转换</h3><pre><code>lower(&apos;STRSQL&apos;);lower(&apos;STRSQL&apos;);</code></pre><h3 id="4-替换null"><a href="#4-替换null" class="headerlink" title="4.替换null"></a>4.替换null</h3><pre><code>isnull(RetailStock,0)COALESCE(RetailStock,0)</code></pre><h3 id="5-执行字符串"><a href="#5-执行字符串" class="headerlink" title="5.执行字符串"></a>5.执行字符串</h3><pre><code>exec strSQLexecute strSQL</code></pre><h3 id="6-拼接字符串"><a href="#6-拼接字符串" class="headerlink" title="6.拼接字符串"></a>6.拼接字符串</h3><pre><code>aaaa&apos; + &apos;ccccc&apos; + &apos;bbb&apos;aaaa&apos; || &apos;ccccc&apos; || &apos;bbb&apos;</code></pre><h3 id="7-拼接字符串插入变量"><a href="#7-拼接字符串插入变量" class="headerlink" title="7.拼接字符串插入变量"></a>7.拼接字符串插入变量</h3><pre><code>&quot;EXEC &apos;select @v_upInt = namefrom &apos; + @v_str_StockTable + &apos;;&apos;;&quot;&quot;v_strSQL_UpdatePack_EXITS :=&apos;select 1 from &apos; || v_str_StockTable || &apos;;&apos;;EXECUTE v_strSQL_UpdatePack_EXITS into v_upInt;&quot;</code></pre><h3 id="8-取前-n-行"><a href="#8-取前-n-行" class="headerlink" title="8.取前 n  行"></a>8.取前 n  行</h3><pre><code>select top 1 * from tableselect * from table limit 1</code></pre><h3 id="9-新建临时表"><a href="#9-新建临时表" class="headerlink" title="9.新建临时表"></a>9.新建临时表</h3><pre><code> Create table #TempStocksAdjust(    SingleProductCode varchar(15) NOT NULL);Create temp table TempStocksAdjust(    SingleProductCode varchar(15) NOT NULL);</code></pre><h3 id="10-if"><a href="#10-if" class="headerlink" title="10.if"></a>10.if</h3><pre><code>if exists (select 1 from str_StockTable where ProductCode = &apos;&apos;ProdCode&apos;&apos;)begin    select 1endif  exists( select *from information_schema.tables where table_name = v_tablename)then    execute v_sql1;end if;</code></pre><h3 id="11-while"><a href="#11-while" class="headerlink" title="11.while"></a>11.while</h3><pre><code>WHILE (SELECT AVG(ListPrice) FROM Production.Product) &lt; $300BEGIN   select 1ENDwhile v_i&lt;320 loop    select 1end loop;</code></pre><h3 id="12-for"><a href="#12-for" class="headerlink" title="12.for"></a>12.for</h3><pre><code>nullFOR i IN 1..10 LOOP    select 1;END LOOP;</code></pre><h3 id="13-向变量赋值"><a href="#13-向变量赋值" class="headerlink" title="13.向变量赋值"></a>13.向变量赋值</h3><pre><code>SELECT @PackIrisu = BundleQtyFROM TmpProduct ;SELECT BundleQty INTO  v_PackIrisuFROM TmpProduct ;</code></pre><h3 id="14-从某表新建表并插入数据"><a href="#14-从某表新建表并插入数据" class="headerlink" title="14.从某表新建表并插入数据"></a>14.从某表新建表并插入数据</h3><pre><code>SELECT    T.ProductCode   AS  ProductCodeINTO HistoryTempA1FROM TempTable_StocksAdjust TCREATE TABLE HistoryTempA1 ASSELECT T.ProductCode AS ProductCodeFROM TempTable_StocksAdjust T;</code></pre><h3 id="15-赋值"><a href="#15-赋值" class="headerlink" title="15.赋值"></a>15.赋值</h3><pre><code>strSQL=&apos;aaaa&apos;strSQL:=&apos;aaaa&apos;</code></pre><h3 id="16-获取传入参数"><a href="#16-获取传入参数" class="headerlink" title="16.获取传入参数"></a>16.获取传入参数</h3><pre><code>EXEC  GetNewUpdateID @ReturnID = @StockUpdateId OUTPUTselect v_returnid INTO v_StockUpdateId from stockdb.GetNewUpdateID();</code></pre><h3 id="17-执行存储过程"><a href="#17-执行存储过程" class="headerlink" title="17.执行存储过程"></a>17.执行存储过程</h3><pre><code>exec GetNewUpdateIDSELECT * from stockdb.getnewupdateid();</code></pre><h3 id="18-定义变量"><a href="#18-定义变量" class="headerlink" title="18.定义变量"></a>18.定义变量</h3><pre><code>DECLARE @strSQL_Delete AS VARCHAR(1000)DECLARE v_str_StockTable varchar(50);</code></pre><h3 id="19-打印语句"><a href="#19-打印语句" class="headerlink" title="19.打印语句"></a>19.打印语句</h3><pre><code>PRINT @ExecuteSQLRAISE NOTICE &apos;%&apos; , v_sql;</code></pre><h3 id="20-捕获异常"><a href="#20-捕获异常" class="headerlink" title="20.捕获异常"></a>20.捕获异常</h3><pre><code>IF(@@ERROR&lt;&gt;0)Begin    Select @LogMsg=@strStoreCd+&apos;店入荷予定日更新失敗。&apos;    Goto Error_HandleEndBEGIN    execute v_sq into v_count;    EXCEPTION WHEN OTHERS THEN    RAISE NOTICE &apos;%&apos; , SQLERRM;END;</code></pre><h3 id="21-查找字符串所在位置"><a href="#21-查找字符串所在位置" class="headerlink" title="21.查找字符串所在位置"></a>21.查找字符串所在位置</h3><pre><code>CHARINDEX(&apos;/-/&apos;,@ORDER_NUM_STR)POSITION(&apos;/-/&apos; in v_ORDER_NUM_STR);</code></pre><h3 id="22-delete-join"><a href="#22-delete-join" class="headerlink" title="22.delete join"></a>22.delete join</h3><pre><code>Delete #T_WスケジュールFrom #T_Wスケジュール T1Inner Join T_D例外スケジュール T2On T1.BranchCD=T2.店CDAnd T1.SupplierCD=T2.ベンダーCDAnd T1.DeliveryWeekDay=T2.納品曜日Where  T1.[WeekDay]&lt;&gt;T2.発注曜日delete from T_Wスケジュール T1where exists(   select *    From T_D例外スケジュール T2    Where T1.BranchCD=T2.店CD        And T1.SupplierCD=T2.ベンダーCD        And T1.DeliveryWeekDay=T2.納品曜日        and  T1.WeekDay&lt;&gt;T2.発注曜日);</code></pre><h3 id="23-update-join"><a href="#23-update-join" class="headerlink" title="23.update join"></a>23.update join</h3><pre><code>UPDATE T1set T1.OrderDateTime =  T2.発注日from shT_Temp_ConfineTable_in_IP as T1inner join T_W修正発注締切日 as  T2on  T2.ベンダーCD=T1.SupplierCDUPDATE shT_Temp_ConfineTable_in_IP  T1set OrderDateTime =  T2.発注日from T_W修正発注締切日 T2WHERE T2.ベンダーCD=T1.SupplierCD</code></pre><h3 id="24-时间-日期的加减"><a href="#24-时间-日期的加减" class="headerlink" title="24.时间,日期的加减"></a>24.时间,日期的加减</h3><pre><code>dateadd(day,2,getdate())date &apos;2001-09-28&apos; + interval &apos;1 hour&apos;</code></pre><h3 id="25-获取日期时间中的一段"><a href="#25-获取日期时间中的一段" class="headerlink" title="25.获取日期时间中的一段"></a>25.获取日期时间中的一段</h3><pre><code>select DatePart (yyyy ,getdate())EXTRACT(DAY from now())</code></pre><h3 id="26-返回当前系统日期时间"><a href="#26-返回当前系统日期时间" class="headerlink" title="26.返回当前系统日期时间"></a>26.返回当前系统日期时间</h3><pre><code>select getdate()select now();</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5 postgres主备机重启流程</title>
      <link href="/2018/02/07/2018-02-07-centos6.5%20postgres%E4%B8%BB%E5%A4%87%E6%9C%BA%E9%87%8D%E5%90%AF%E6%B5%81%E7%A8%8B/"/>
      <url>/2018/02/07/2018-02-07-centos6.5%20postgres%E4%B8%BB%E5%A4%87%E6%9C%BA%E9%87%8D%E5%90%AF%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h3 id="Postgres主备机数据库重启流程"><a href="#Postgres主备机数据库重启流程" class="headerlink" title="Postgres主备机数据库重启流程"></a>Postgres主备机数据库重启流程</h3><p>1.先关闭pgpool</p><p>2.再关闭备机</p><p>3.再关闭主机</p><p>4.启动主机</p><p>5.启动备机</p><p>6.启动pgpool</p>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7 jdk安装</title>
      <link href="/2018/02/07/2018-02-07-centos7%20jdk%E5%AE%89%E8%A3%85/"/>
      <url>/2018/02/07/2018-02-07-centos7%20jdk%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h2><h3 id="1-从从远程服务器复制到本地"><a href="#1-从从远程服务器复制到本地" class="headerlink" title="1.从从远程服务器复制到本地"></a>1.从从远程服务器复制到本地</h3><pre><code>scp root@10.144.87.70:/root/jdk-7u71-linux-x64.rpm /root</code></pre><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><pre><code>rpm -ivh /root/jdk-7u71-linux-x64.rpm</code></pre><h3 id="3-设置环境变量（在文件末尾加入）"><a href="#3-设置环境变量（在文件末尾加入）" class="headerlink" title="3.设置环境变量（在文件末尾加入）"></a>3.设置环境变量（在文件末尾加入）</h3><pre><code>vim /etc/profileexport JAVA_HOME=/usr/java/jdk1.7.0_71export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/binexport JAVA_HOME CLASSPATH PATH</code></pre><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h3><pre><code>java -versionjavac</code></pre>]]></content>
      
      
        <tags>
            
            <tag> pacer基盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>postgres建立外部表</title>
      <link href="/2018/02/07/2018-02-07-postgres%E5%BB%BA%E7%AB%8B%E5%A4%96%E9%83%A8%E8%A1%A8/"/>
      <url>/2018/02/07/2018-02-07-postgres%E5%BB%BA%E7%AB%8B%E5%A4%96%E9%83%A8%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="建立外部表"><a href="#建立外部表" class="headerlink" title="建立外部表"></a>建立外部表</h2><pre><code>--安装postgres_fdwCREATE EXTENSION postgres_fdw--新建远程数据库create server masterdb foreign data wrapper postgres_fdw options (host localhost,dbname MasterDB,port 5432) ;--新建用户create user mapping FOR postgres server masterdb options (user postgres,password sa) ;--建立外部表CREATE FOREIGN TABLE branches   (branchcd integer ,    branchname character varying(64) ,    branchtype integer NOT NULL)   SERVER masterdb;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5 postgres主备切换</title>
      <link href="/2018/02/07/2018-02-07-centos6.5%20postgres%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2/"/>
      <url>/2018/02/07/2018-02-07-centos6.5%20postgres%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h3 id="Hot-Standby"><a href="#Hot-Standby" class="headerlink" title="Hot Standby"></a>Hot Standby</h3><p>作用<br>读写分离<br>克隆主数据库,当主数据库出现致命状况时,起动备数据库,替代主数据库.</p><p>备份方式<br>流复制:   从库通过tcp流从主库中同步相应的数据<br>基于文件: 主库执行完,才拷贝到从库</p><h3 id="1-主机配置"><a href="#1-主机配置" class="headerlink" title="1.主机配置"></a>1.主机配置</h3><pre><code>1) 修改pg_hba.conf,设置postgres用户,请求流复制    host    replication     postgres        0.0.0.0/0            md52) 修改postgresql.conf    # 设置主备模式    wal_level = hot_standby    # 设置从机数量    max_wal_senders = 5    # 设置流复制保留的最多的xlog数目    wal_keep_segments = 1000    # 防止主库生成WAL日志太快，日志还没有来得及传送到standby，就会循环覆盖    max_wal_senders = 5    # 设置流复制主机发送数据的超时时间    wal_sender_timeout = 60s    # 最大连接数,从库的max_connections必须要大于主库的,一般查多于写    max_connections = 1003) 重启主机    service postgres-9.3-openscg restart</code></pre><h3 id="2-从机配置"><a href="#2-从机配置" class="headerlink" title="2.从机配置"></a>2.从机配置</h3><pre><code>1) 修改recovery.conf    cp /opt/postgres/9.3/share/postgresql/recovery.conf.sample /opt/postgres/9.3/data/recovery.conf    # 设为从机    standby_mode = on    # 对应主机的信息    primary_conninfo = &apos;host=10.144.208.5 port=5432 user=postgres password=sa&apos;    # 流复制同步到最新的数据    recovery_target_timeline = &apos;latest&apos;2) 修改postgresql.conf    # 开启数据查询    hot_standby = on    # 数据流备份的最大延迟时间    max_standby_streaming_delay = 30s    # 多久向主报告一次从的状态    wal_receiver_status_interval = 1s    # 如果有错误的数据复制，是否向主进行反馈    hot_standby_feedback = on3) 重启从机    service postgres-9.3-openscg restart</code></pre><h3 id="3-查看状态"><a href="#3-查看状态" class="headerlink" title="3.查看状态"></a>3.查看状态</h3><pre><code>/opt/postgres/9.3/bin/psql -U postgres -p 5432 -c &quot;select * from pg_stat_replication;&quot;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js平假名、片假名转换</title>
      <link href="/2018/02/01/2018-02-01-js%E5%B9%B3%E5%81%87%E5%90%8D%E3%80%81%E7%89%87%E5%81%87%E5%90%8D%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/02/01/2018-02-01-js%E5%B9%B3%E5%81%87%E5%90%8D%E3%80%81%E7%89%87%E5%81%87%E5%90%8D%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h2 id="カタカナをひらがなに変換する関数"><a href="#カタカナをひらがなに変換する関数" class="headerlink" title="カタカナをひらがなに変換する関数"></a>カタカナをひらがなに変換する関数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function katakanaToHiragana(src) &#123;</span><br><span class="line">return src.replace(/[\u30a1-\u30f6]/g, function(match) &#123;</span><br><span class="line">var chr = match.charCodeAt(0) - 0x60;</span><br><span class="line">return String.fromCharCode(chr);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ひらがなをカタカナに変換する関数"><a href="#ひらがなをカタカナに変換する関数" class="headerlink" title="ひらがなをカタカナに変換する関数"></a>ひらがなをカタカナに変換する関数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function hiraganaToKatagana(src) &#123;</span><br><span class="line">return src.replace(/[\u3041-\u3096]/g, function(match) &#123;</span><br><span class="line">var chr = match.charCodeAt(0) + 0x60;</span><br><span class="line">return String.fromCharCode(chr);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5安装keepalived</title>
      <link href="/2018/01/29/2018-01-29-centos6.5%E5%AE%89%E8%A3%85keepalived/"/>
      <url>/2018/01/29/2018-01-29-centos6.5%E5%AE%89%E8%A3%85keepalived/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre><code># 安装nc工具，方便检测端口yum install nc# 安装keepalivedyum install keepalived# 开启keepalived服务chkconfig keepalived on</code></pre><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><pre><code>cd /etc/keepalivedcp keepalived.conf keepalived.conf.bk# ifconfig 查看ip对应的网卡,下面的eth6等设置为ip对应的网卡，否则切换虚拟IP的时候不能及时反应。# 设置主机vi keepalived.conf    ! Configuration File for keepalived    global_defs {       notification_email {         root@localhost       }       notification_email_from websv1@pacer.com       smtp_server localhost       smtp_connect_timeout 30       router_id nginx_master    }    vrrp_instance VI_1 {        state MASTER        interface eth0            设置当前ip对应的网卡        virtual_router_id 51        priority 100            priority值大的优先，主机100，备机90        advert_int 1        authentication {            auth_type PASS            auth_pass 1111        }        virtual_ipaddress {            172.17.254.86            虚拟IP，主备一致        }    }    vrrp_script chk_http_port {        script &quot;/opt/chk_nginx.sh&quot;        interval 2        weight 2    }    track_script {        chk_http_port    }# 设置备机vi keepalived.conf    ! Configuration File for keepalived    global_defs {       notification_email {         root@localhost       }       notification_email_from websv1@pacer.com       smtp_server localhost       smtp_connect_timeout 30       router_id nginx_backup    }    vrrp_instance VI_1 {        state MASTER        interface eth5        virtual_router_id 51        priority 90        advert_int 1        authentication {            auth_type PASS            auth_pass 1111        }        virtual_ipaddress {            172.17.254.86        }    }    vrrp_script chk_http_port {        script &quot;/opt/chk_nginx.sh&quot;        interval 2        weight 2    }    track_script {        chk_http_port    }</code></pre><h3 id="检测nginx状态"><a href="#检测nginx状态" class="headerlink" title="检测nginx状态"></a>检测nginx状态</h3><pre><code># 创建可执行脚本：/opt/chk_nginx.sh ，用于检测nginx挂掉的时候，也一起停止keepalived，以激活备机的keepalivedvi /opt/chk_nginx.sh    #!/bin/sh    # check nginx server status    PORT=80    nc -z localhost $PORT | grep &quot;succeeded&quot;    #nmap localhost -p $PORT | grep &quot;$PORT/tcp open&quot;    #echo $?    if [ $? -ne 0 ];then        service nginx restart        sleep 1        nc -z localhost $PORT | grep &quot;succeeded&quot;        [ $? -ne 0 ] &amp;&amp; service keepalived stop &amp;&amp; echo $(date +%Y-%m-%d_%T) &quot;nginx server stoped , please check&quot; | mail -S from=websv@pacer.com -s NginxServerError -c 10085467zhang_yongguang@cn.tre-inc.com 10116678yao_kaibao@cn.tre-inc.com    fichmod +x /opt/chk_nginx.sh</code></pre><h3 id="启动keepalived"><a href="#启动keepalived" class="headerlink" title="启动keepalived"></a>启动keepalived</h3><pre><code># 主机87：service keepalived start# 备机88：service keepalived start</code></pre>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5安装pgpool</title>
      <link href="/2018/01/29/2018-01-29-centos6.5%E5%AE%89%E8%A3%85pgpool/"/>
      <url>/2018/01/29/2018-01-29-centos6.5%E5%AE%89%E8%A3%85pgpool/</url>
      <content type="html"><![CDATA[<h3 id="设置主备机免密码传输"><a href="#设置主备机免密码传输" class="headerlink" title="设置主备机免密码传输"></a>设置主备机免密码传输</h3><pre><code>主机：    172.17.254.90cd ~/.sshssh-keygen -t rsacat id_rsa.pub &gt;&gt;authorized_keys                 #本机ssh信任ssh-copy-id -i root@172.17.254.91                #他机ssh信任备机：    172.17.254.91cd ~/.sshssh-keygen -t rsacat id_rsa.pub &gt;&gt;authorized_keys                 #本机ssh信任ssh-copy-id -i root@172.17.254.90                #他机ssh信任</code></pre><h3 id="1-安装pgpool"><a href="#1-安装pgpool" class="headerlink" title="1.安装pgpool"></a>1.安装pgpool</h3><pre><code>yum install http://www.pgpool.net/yum/rpms/3.4/redhat/rhel-6-x86_64/pgpool-II-pg93-3.4.1-3pgdg.rhel6.x86_64.rpmyum install http://www.pgpool.net/yum/rpms/3.4/redhat/rhel-6-x86_64/pgpool-II-pg93-extensions-3.4.1-3pgdg.rhel6.x86_64.rpm# 创建pgpool需要的目录mkdir -p /var/run/pgpool# copy类库cp /usr/pgsql-9.3/lib/* /opt/postgres/9.3/lib/postgresql#开启pgpool服务chkconfig pgpool on### 主机执行/opt/postgres/9.3/bin/psql -U postgres -f /opt/postgres/9.3/share/postgresql/extension/pgpool-regclass.sql template1/opt/postgres/9.3/bin/psql -U postgres -f /opt/postgres/9.3/share/postgresql/extension/pgpool-recovery.sql template1/opt/postgres/9.3/bin/psql -U postgres -f /usr/share/pgpool-II/insert_lock.sql template1</code></pre><h3 id="2-配置-pgpool"><a href="#2-配置-pgpool" class="headerlink" title="2.配置 pgpool"></a>2.配置 pgpool</h3><pre><code>1) 主备机共同设置    cd /etc/pgpool-II    vi pcp.conf        # 密码： pg_md5 sa        postgres:c12e01f2a13ff5587e1e9e4aedb8242d    vi pool_hba.conf        local   all         all                               md5        host    all         all         0.0.0.0/0             md5    vi pool_passwd        # 密码        postgres:md5a5e20f3305a136f537aabcbfa853f4672) 以pgpool.conf.sample-stream为蓝本修改    cat pgpool.conf.sample-stream &gt;pgpool.conf### 主机配置enable_pool_hba = onlisten_addresses = &apos;*&apos;# pg主机backend_hostname0 = &apos;10.2.2.81&apos;backend_port0 = 5432# pg主机负载均衡权重backend_weight0 = 1# pg备机backend_hostname1 = &apos;10.2.2.82&apos;backend_port1 = 5432# pg备机负载均衡权重backend_weight1 = 999999sr_check_user = &apos;postgres&apos;sr_check_password = &apos;sa&apos;# pgpool子进程数量num_init_children = 300log_destination = &apos;syslog&apos;# 健康检查的间隔health_check_period = 5# 健康检查重试次数health_check_max_retries = 3health_check_user = &apos;postgres&apos;health_check_password = &apos;sa&apos;failover_command = &apos;/opt/postgres/9.3/bin/failover_stream.sh %d %P %H %h&apos;                                                                                                            # failover脚本# 可接受的延迟数据量，超过此数据量，查询发送到主机delay_threshold = 10000000recovery_user = &apos;postgres&apos;recovery_password = &apos;sa&apos;#watchdoguse_watchdog = on# 本机ipwd_hostname = &apos;10.2.2.81&apos;# 虚拟ip，主备一致  eth3为ip对应的网卡delegate_IP = &apos;10.2.2.80&apos;if_up_cmd = &apos;ifconfig eth3:0 inet $_IP_$ netmask 255.255.255.0if_down_cmd = &apos;ifconfig eth3:0 down&apos;# pgpool备机ipheartbeat_destination0 = &apos;10.2.2.82&apos;heartbeat_destination_port0 = 9694wd_lifecheck_user = &apos;postgres&apos;wd_lifecheck_password = &apos;sa&apos;# pgpool备机ipother_pgpool_hostname0 = &apos;10.2.2.82&apos;other_pgpool_port0 = 5432other_wd_port0 = 9000# ip对应的网卡heartbeat_device0 = &apos;eth3&apos;### 备机配置enable_pool_hba = onlisten_addresses = &apos;*&apos;backend_hostname0 = &apos;10.2.2.81&apos;backend_port0 = 5432backend_weight0 = 1backend_hostname1 = &apos;10.2.2.82&apos;backend_port1 = 5432backend_weight1 = 999999sr_check_user = &apos;postgres&apos;sr_check_password = &apos;sa&apos;num_init_children = 300log_destination = &apos;syslog&apos;health_check_period = 5health_check_max_retries = 3health_check_user = &apos;postgres&apos;health_check_password = &apos;sa&apos;failover_command = &apos;/opt/postgres/9.3/bin/failover_stream.sh %d %H /tmp/trigger_file0&apos;delay_threshold = 10000000recovery_user = &apos;postgres&apos;recovery_password = &apos;sa&apos;#watchdoguse_watchdog = onwd_hostname = &apos;10.2.2.82&apos;delegate_IP = &apos;10.2.2.80&apos;if_up_cmd = &apos;ifconfig eth5:0 inet $_IP_$ netmask 255.255.255.0if_down_cmd = &apos;ifconfig eth5:0 down&apos;# 主机ipheartbeat_destination0 = &apos;10.2.2.81&apos;heartbeat_destination_port0 = 9694wd_lifecheck_user = &apos;postgres&apos;wd_lifecheck_password = &apos;sa&apos;# 主机ipother_pgpool_hostname0 = &apos;10.2.2.81&apos;other_pgpool_port0 = 5432other_wd_port0 = 9000heartbeat_device0 = &apos;eth5&apos;3) 创建可执行脚本：/opt/postgres/9.3/bin/failover_stream.sh（主机挂，则在备机生成触发文件，备机升级为主机；备机挂，则主机修改为异步模式后重启）#! /bin/sh# Failover command for streaming replication.# This script assumes that DB node 0 is primary, and 1 is standby.## If standby goes down, do nothing. If primary goes down, create a# trigger file so that standby takes over primary node.## Arguments: $1: failed node id. $2: old master node. $3: new master hostname. $4: failed master hostname.failed_node=$1old_primary_node=$2new_master=$3failed_master=$4trigger_file=/tmp/trigger_file0# Send Mailecho $(date +%Y-%m-%d_%T) &quot;DBNode&quot;$failed_node $failed_master&quot; is Error, New Master is &quot;$new_master | mail -S from=postgres@pacer.com -s DBServerError -c 2200007fan_hegang@cn.tre-inc.com -c 2200006cui_weixia@cn.tre-inc.com -c 10045280zhou_zhaoyong@cn.tre-inc.com 10004307wang_yuquan@cn.tre-inc.comif [ $failed_node != $old_primary_node ]; then    # standby goes down    # Change master to async mode.    ssh -T $new_master &quot;cat /opt/postgres/9.3/data/postgresql.conf.async &gt; /opt/postgres/9.3/data/postgresql.conf &amp;&amp; /sbin/service postgres-9.3-openscg restart&quot;;else    # master goes down    # Create the trigger file, make standby to master.    ssh -T $failed_master &quot;pgpool stop&quot; &amp;    sleep 2    ssh -T $failed_master &quot;ps -ef | grep pgpool | grep -v grep  | awk &apos;{system(\&quot;kill -9 \&quot; \$2)}&apos; &amp;&amp; rm -f /tmp/.s.PGSQL.9999 /tmp/.s.PGSQL.9898 &quot;;    ssh -T $new_master touch $trigger_filefiexit 0;4）修改所属用户为postgreschown postgres:postgres /opt/postgres/9.3/bin/failover_stream.shchmod +x /opt/postgres/9.3/bin/failover_stream.sh</code></pre><h3 id="3-启动pgpool"><a href="#3-启动pgpool" class="headerlink" title="3.启动pgpool"></a>3.启动pgpool</h3><pre><code>LD_LIBRARY_PATH=&quot;/opt/postgres/9.3/lib/&quot;export LD_LIBRARY_PATH注意启动顺序，先启动的为活跃pgpool主机：pgpool备机：pgpool检验pgpoolshow synchronous_standby_names;# 检验pgpool/opt/postgres/9.3/bin/psql -p 9999 -U postgres -c &quot;show pool_nodes;&quot;# 检验pacer用户使用pgpool/opt/postgres/9.3/bin/psql -p 9999 -U pacer -d postgres -c &quot;show pool_nodes;&quot;# 检验虚拟ip使用pgpool/opt/postgres/9.3/bin/psql -h 10.2.2.80 -p 9999 -U pacer -c &quot;show pool_nodes;&quot;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos6.5安装postgres9.3</title>
      <link href="/2018/01/29/2018-01-29-centos6.5%E5%AE%89%E8%A3%85postgres9.3/"/>
      <url>/2018/01/29/2018-01-29-centos6.5%E5%AE%89%E8%A3%85postgres9.3/</url>
      <content type="html"><![CDATA[<hr><p>layout:     post<br>title:      Postgres9.3 安装<br>subtitle:<br>date:       2017-12-06<br>author:     张永光<br>header-img: img/post-bg-mma-3.jpg<br>catalog: true<br>tags:</p><pre><code>- postgres</code></pre><hr><h2 id="安装postgreSQL主程序"><a href="#安装postgreSQL主程序" class="headerlink" title="安装postgreSQL主程序"></a>安装postgreSQL主程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http://oscg-downloads.s3.amazonaws.com/packages/postgres-9.3.5-1.x86_64.openscg.rpm</span><br><span class="line">rpm -ivh postgres-9.3.5-1.x86_64.openscg.rpm</span><br><span class="line">#根据提示输入</span><br><span class="line">/etc/init.d/postgres-9.3-openscg start</span><br><span class="line">#根据提示输入依次输入端口号，密码，密码不会显示</span><br><span class="line">#完成安装后，postgreSQL会自动启动</span><br><span class="line"></span><br><span class="line">#默认安装地址为：/opt/postgres</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/profile /etc/profile.bk</span><br><span class="line">vi /etc/profile</span><br><span class="line">#按i建进入输入模式，追加以下内容</span><br><span class="line">export LD_LIBRARY_PATH=/opt/postgres/9.3/lib:$LD_LIBRARY_PATH</span><br><span class="line"> export PATH=/opt/postgres/9.3/bin:$PATH</span><br><span class="line"> export PGDATA=/opt/postgres/9.3/data</span><br><span class="line"></span><br><span class="line">#按Esc键退出输入模式</span><br><span class="line">#同时按住“Shift”键与“；”键进入尾行模式，输入以下内容退出vi编辑器</span><br><span class="line">wq</span><br><span class="line">#退出后输入</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/postgres/9.3/data</span><br><span class="line">cp pg_hba.conf pg_hba.conf.bk</span><br><span class="line">vi pg_hba.conf</span><br><span class="line">#按i建进入输入模式，在</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             127.0.0.1/32            md5</span><br><span class="line">#之后添加</span><br><span class="line">host    all             all             0.0.0.0/0               md5</span><br><span class="line">#按Esc键退出输入模式</span><br><span class="line">#同时按住“Shift”键与“；”键进入尾行模式，输入以下内容退出vi编辑器</span><br><span class="line">wq</span><br></pre></td></tr></table></figure><h2 id="修改最大连接数"><a href="#修改最大连接数" class="headerlink" title="修改最大连接数"></a>修改最大连接数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/postgres/9.3/data</span><br><span class="line">cp postgresql.conf postgresql.conf.bk</span><br><span class="line">vi postgresql.conf</span><br><span class="line">#按i建进入输入模式后</span><br><span class="line">listen_addresses = &apos;*&apos;# what IP address(es) to listen on;</span><br><span class="line"># comma-separated list of addresses;</span><br><span class="line"># defaults to &apos;localhost&apos;; use &apos;*&apos; for all</span><br><span class="line"># (change requires restart)</span><br><span class="line">port = 5432# (change requires restart)</span><br><span class="line">max_connections = 100# (change requires restart)</span><br><span class="line"></span><br><span class="line">#将红字的100替换成你需要的数字，此最大数与系统设置，硬件有关</span><br><span class="line">#按Esc键退出输入模式</span><br><span class="line">#同时按住“Shift”键与“；”键进入尾行模式，输入以下内容退出vi编辑器</span><br><span class="line">wq</span><br></pre></td></tr></table></figure><h2 id="重启postgreSQL"><a href="#重启postgreSQL" class="headerlink" title="重启postgreSQL"></a>重启postgreSQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/postgres/9.3/bin</span><br><span class="line">su postgres</span><br><span class="line">./pg_ctl restart</span><br></pre></td></tr></table></figure><h2 id="安装外部扩展组件"><a href="#安装外部扩展组件" class="headerlink" title="安装外部扩展组件"></a>安装外部扩展组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#需要安装的外部扩展组件有：</span><br><span class="line">#postgres_fdw</span><br><span class="line">#sqlserver_fdw</span><br><span class="line">#注意：如果只安装postgres_fdw，不需要安装EPEL与FreeTDS，</span><br><span class="line">#安装EPEL</span><br><span class="line">wget http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line">rpm -ivh epel-release-6-8.noarch.rpm</span><br><span class="line">#安装FreeTDS</span><br><span class="line">yum install freetds freetds-devel</span><br><span class="line">#将下载的postgres_fdw-1.0.0.zip，tds_fdw-1.0.1.zip解压</span><br><span class="line">unzip postgres_fdw-1.0.0.zip</span><br><span class="line">unzip tds_fdw-1.0.1.zip</span><br><span class="line">#安装postgres_fdw</span><br><span class="line">cd postgres_fdw-1.0.0</span><br><span class="line">PATH=/opt/postgres/9.2/bin:$PATH make USE_PGXS=1</span><br><span class="line">PATH=/opt/postgres/9.2/bin:$PATH make USE_PGXS=1 install</span><br><span class="line">#安装tds_fdw（sqlserver_fdw）</span><br><span class="line">cd tds_fdw-1.0.1</span><br><span class="line">PATH=/opt/postgres/9.2/bin:$PATH make USE_PGXS=1</span><br><span class="line">PATH=/opt/postgres/9.2/bin:$PATH make USE_PGXS=1 install</span><br></pre></td></tr></table></figure><h2 id="安装postgres-fdw"><a href="#安装postgres-fdw" class="headerlink" title="安装postgres_fdw"></a>安装postgres_fdw</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE EXTENSION postgres_fdw</span><br><span class="line">#新建远程数据库host远程数据库的ipdbname远程连接的服务器名</span><br><span class="line">#新建用户</span><br><span class="line">#for后面的postgres是本地登录执行的用户名,option里存储的是远程的用户密码</span><br><span class="line">create user mapping FOR postgres server stockdb options (user &apos;postgres&apos;,password &apos;1234&apos;) ;</span><br><span class="line">#建立外部表</span><br><span class="line">CREATE FOREIGN TABLE stocksadjustreason(reasonno integer NOT NULL</span><br><span class="line">,reasoncontent character varying(50) NOT NULL</span><br><span class="line">,reasondetailcontent character varying(50) NOT NULL)</span><br><span class="line">server stockdb options (schema_name &apos;public&apos;,table_name &apos;stocksadjustreason&apos;);</span><br><span class="line">#查询外部表</span><br><span class="line">select * from stocksadjustreason ;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CentOS6.5 安装mysql</title>
      <link href="/2018/01/19/2018-01-19-CentOS6.5%20%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2018/01/19/2018-01-19-CentOS6.5%20%E5%AE%89%E8%A3%85mysql/</url>
      <content type="html"><![CDATA[<h3 id="1、查看有无安装过mysql"><a href="#1、查看有无安装过mysql" class="headerlink" title="1、查看有无安装过mysql"></a>1、查看有无安装过mysql</h3><pre><code>yum list installed mysql</code></pre><h3 id="2、查看有无安装包"><a href="#2、查看有无安装包" class="headerlink" title="2、查看有无安装包"></a>2、查看有无安装包</h3><pre><code>yum list mysql*</code></pre><h3 id="3、安装mysql服务端"><a href="#3、安装mysql服务端" class="headerlink" title="3、安装mysql服务端"></a>3、安装mysql服务端</h3><pre><code>yum install mysql-serveryum install mysql-devel</code></pre><h3 id="4、启动-amp-amp-停止"><a href="#4、启动-amp-amp-停止" class="headerlink" title="4、启动&amp;&amp;停止"></a>4、启动&amp;&amp;停止</h3><pre><code>vim /etc/my.cnf    default-character-set=utf8            #设置默认字符    lower_case_table_names=1            #忽略大小写#开机启动chkconfig mysqld onchkconfig --list mysqld#启动mysqlservice mysqld start</code></pre><h3 id="5、远程访问"><a href="#5、远程访问" class="headerlink" title="5、远程访问"></a>5、远程访问</h3><pre><code>#创建rootmysqladmin -u root password root1234#修改密码service mysqld stopmysqld_safe --user=root --skip-grant-tablesmysql -u rootuse mysqlupdate user set password=password(&quot;root1234&quot;) where user=&quot;root&quot;;flush privileges;#修改localhostupdate user set host = &apos;%&apos; where user = &apos;root&apos;;select host, user from user;FLUSH PRIVILEGES;#root身份访问数据的权限mysql -h localhost -u rootGRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; WITH GRANT OPTION; //赋予任何主机上以root身份访问数据的权限FLUSH PRIVILEGES;service mysqld stopservice mysqld start</code></pre>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>adb shell查看sqlite数据库</title>
      <link href="/2018/01/17/2018-01-17-adb%20shell%E6%9F%A5%E7%9C%8Bsqlite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/01/17/2018-01-17-adb%20shell%E6%9F%A5%E7%9C%8Bsqlite%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h3 id="1-进入app程序"><a href="#1-进入app程序" class="headerlink" title="1.进入app程序"></a>1.进入app程序</h3><pre><code>adb shellrun-as com.tre.android.framework(app的package名）cd databases</code></pre><h3 id="2-打开sqlite数据库"><a href="#2-打开sqlite数据库" class="headerlink" title="2.打开sqlite数据库"></a>2.打开sqlite数据库</h3><pre><code>sqlite3 pacerplayer.db</code></pre><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3.常用命令"></a>3.常用命令</h3><pre><code>.tables         查看所有表.mode column    显示的列会对齐.header on      显示列名.mode insert secure 显示插入语句</code></pre>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>11.yum使用</title>
      <link href="/2018/01/13/2018-01-13-11.yum%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/01/13/2018-01-13-11.yum%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-查看"><a href="#1-查看" class="headerlink" title="1.查看"></a>1.查看</h2><pre><code>rpm -qa</code></pre><h2 id="2-卸载与httpd类似软件"><a href="#2-卸载与httpd类似软件" class="headerlink" title="2.卸载与httpd类似软件"></a>2.卸载与httpd类似软件</h2><pre><code>yum -y remove httpd*</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3.find命令</title>
      <link href="/2018/01/13/2018-01-13-3.find%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/01/13/2018-01-13-3.find%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="1-从根目录查找大于50MB的文件，并按大小列表显示前10个"><a href="#1-从根目录查找大于50MB的文件，并按大小列表显示前10个" class="headerlink" title="1.从根目录查找大于50MB的文件，并按大小列表显示前10个"></a>1.从根目录查找大于50MB的文件，并按大小列表显示前10个</h2><pre><code>find / -printf &quot;%k %p\n&quot;|sort -g -k 1,1|\awk {if($1&gt;50000) print $1/1024 &quot;MB&quot; &quot; &quot; $2}|tail -n 10</code></pre><h2 id="2-从当前目录开始-查找本目录下大于10M的文件并显示详细信息"><a href="#2-从当前目录开始-查找本目录下大于10M的文件并显示详细信息" class="headerlink" title="2.从当前目录开始, 查找本目录下大于10M的文件并显示详细信息"></a>2.从当前目录开始, 查找本目录下大于10M的文件并显示详细信息</h2><pre><code>find . -size +10000000c -exec ls -lh {} \;</code></pre><h2 id="3-查找文件并压缩"><a href="#3-查找文件并压缩" class="headerlink" title="3.查找文件并压缩"></a>3.查找文件并压缩</h2><pre><code>find . -size -2000000c -name &quot;*11-21*0083*&quot; -exec zip 83.zip {} \;</code></pre><h2 id="4-声音文件作出"><a href="#4-声音文件作出" class="headerlink" title="4.声音文件作出"></a>4.声音文件作出</h2><pre><code>find ./ -name &quot;*2016-12-08*&quot;  -exec zip 20161208.zip {} \;</code></pre><h2 id="5-查找字符串"><a href="#5-查找字符串" class="headerlink" title="5.查找字符串"></a>5.查找字符串</h2><pre><code>find ./ -type f -name &quot;*.*&quot;|xargs grep &quot;.*10.2.4.92.*&quot;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5.sed</title>
      <link href="/2018/01/13/2018-01-13-5.sed/"/>
      <url>/2018/01/13/2018-01-13-5.sed/</url>
      <content type="html"><![CDATA[<h2 id="1-将-statement-前面的部分予以删除"><a href="#1-将-statement-前面的部分予以删除" class="headerlink" title="1.将 statement 前面的部分予以删除"></a>1.将 statement 前面的部分予以删除</h2><pre><code>sed -i s/^.*statement://g ./0619</code></pre><h2 id="2-将-message-后面的部分予以删除"><a href="#2-将-message-后面的部分予以删除" class="headerlink" title="2.将 message 后面的部分予以删除"></a>2.将 message 后面的部分予以删除</h2><pre><code>sed -i s/message:.*$//g ./0619</code></pre><h2 id="3-替换"><a href="#3-替换" class="headerlink" title="3.替换"></a>3.替换</h2><pre><code>sed -i s/&quot;//g 0619</code></pre><h2 id="4-删除包含"><a href="#4-删除包含" class="headerlink" title="4.删除包含"></a>4.删除包含</h2><pre><code>sed -i /unlisten/d  0619sed -i /DISCARD ALL/d  0619</code></pre><h2 id="5-删除空行"><a href="#5-删除空行" class="headerlink" title="5.删除空行"></a>5.删除空行</h2><pre><code>sed -i /^$/d abc。txt</code></pre><p>实例</p><h2 id="1-往文件的顶部添加文字"><a href="#1-往文件的顶部添加文字" class="headerlink" title="1.往文件的顶部添加文字"></a>1.往文件的顶部添加文字</h2><pre><code>sed -i 1s/^/123/ abc.txt</code></pre><h2 id="2-对一个目录文件进行递归搜索和替换"><a href="#2-对一个目录文件进行递归搜索和替换" class="headerlink" title="2.对一个目录文件进行递归搜索和替换"></a>2.对一个目录文件进行递归搜索和替换</h2><pre><code>find . -type f -name *.txt -exec sed -i  s/this/that/g {} +</code></pre><h2 id="3-替换字符串"><a href="#3-替换字符串" class="headerlink" title="3.替换字符串"></a>3.替换字符串</h2><pre><code>sed -i &quot;&quot;  &apos;s/^02-2[0-9]\ [0-9][0-9]:[0-9][0-9]:[0-9][0-9].[0-9][0-9][0-9]//g&apos; 192.168.13.73.logfind . -exec ls -lh {} \;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.linux目录结构</title>
      <link href="/2018/01/13/2018-01-13-1.linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/2018/01/13/2018-01-13-1.linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<table><thead><tr><th>目录</th><th>说明</th><th>demo</th></tr></thead><tbody><tr><td>/</td><td>根</td></tr><tr><td>/bin</td><td>用户二进制文件</td><td>ps,grep,ping,ls</td></tr><tr><td>/sbin</td><td>系统二进制文件</td></tr><tr><td>/etc</td><td>配置文件</td></tr><tr><td>/dev</td><td>设备文件</td><td>终端、USB</td></tr><tr><td>/proc</td><td>进程信息</td></tr><tr><td>/var</td><td>变量文件，内容增长的文件</td><td>系统日志、数据、电子邮件</td></tr><tr><td>/tmp</td><td>临时文件，系统重启文件会被删除</td></tr><tr><td>/usr</td><td>用户程序</td><td>awk,less,sep</td></tr><tr><td>/home</td><td>所有用户的个人文档</td></tr><tr><td>/boot</td><td>引导加载程序</td></tr><tr><td>/lib</td><td>系统库</td></tr><tr><td>/opt</td><td>可选的附加应用程序</td></tr><tr><td>/mnt</td><td>挂载目录，挂载系统文件</td></tr><tr><td>/media</td><td>可移动媒体设备</td></tr><tr><td>/srv</td><td>服务数据</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>6.wget</title>
      <link href="/2018/01/13/2018-01-13-6.wget/"/>
      <url>/2018/01/13/2018-01-13-6.wget/</url>
      <content type="html"><![CDATA[<h2 id="1-使用wget下载文件"><a href="#1-使用wget下载文件" class="headerlink" title="1.使用wget下载文件"></a>1.使用wget下载文件</h2><pre><code>1)使用wget下载单个文件wget http://www.minjieren.com/wordpress-3.1-zh_CN.zip2)使用wget -O下载并以不同的文件名保存wget -O wordpress.zip http://www.minjieren.com/download.aspx?id=10803)使用wget -c断点续传wget -c http://www.minjieren.com/wordpress-3.1-zh_CN.zip</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>8.tar</title>
      <link href="/2018/01/13/2018-01-13-8.tar/"/>
      <url>/2018/01/13/2018-01-13-8.tar/</url>
      <content type="html"><![CDATA[<h2 id="1-压缩"><a href="#1-压缩" class="headerlink" title="1)压缩"></a>1)压缩</h2><pre><code>tar -zcvf /tmp/etc.tar.gz /etc</code></pre><h2 id="2-解压到压缩目录"><a href="#2-解压到压缩目录" class="headerlink" title="2)解压到压缩目录"></a>2)解压到压缩目录</h2><pre><code>tar -zxvf /tmp/etc.tar.gz</code></pre><h2 id="3-指定目录"><a href="#3-指定目录" class="headerlink" title="3.指定目录"></a>3.指定目录</h2><pre><code>tar -cvf test.tgz test/ --exclude dir1</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9.cpu</title>
      <link href="/2018/01/13/2018-01-13-9.cpu/"/>
      <url>/2018/01/13/2018-01-13-9.cpu/</url>
      <content type="html"><![CDATA[<h2 id="1-物理CPU个数"><a href="#1-物理CPU个数" class="headerlink" title="1.物理CPU个数"></a>1.物理CPU个数</h2><pre><code>cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</code></pre><h2 id="2-每个CPU中的core个数"><a href="#2-每个CPU中的core个数" class="headerlink" title="2.每个CPU中的core个数"></a>2.每个CPU中的core个数</h2><pre><code>cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq</code></pre><h2 id="3-逻辑CPU个数"><a href="#3-逻辑CPU个数" class="headerlink" title="3.逻辑CPU个数"></a>3.逻辑CPU个数</h2><pre><code>cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l逻辑CPU = CPU个数 * 每个CPU核数 * 2(超线程HT开启)</code></pre><h2 id="4-CPU状态信息us-sy-ni-id-wa-hi-si-st含义"><a href="#4-CPU状态信息us-sy-ni-id-wa-hi-si-st含义" class="headerlink" title="4.CPU状态信息us,sy,ni,id,wa,hi,si,st含义"></a>4.CPU状态信息us,sy,ni,id,wa,hi,si,st含义</h2><pre><code>us 用户空间占用CPU百分比sy 内核空间占用CPU百分比ni 用户进程空间内改变过优先级的进程占用CPU百分比id 空闲CPU百分比wa 等待输入输出的CPU时间百分比hi 硬件中断si 软件中断</code></pre><p>####CPU负荷</p><h2 id="1-load-average"><a href="#1-load-average" class="headerlink" title="1.load average"></a>1.load average</h2><pre><code>1) 一定时间内有多少个active_tasks正在处理及等待CPU处理的进程数之和,越多CPU切换越频繁2) 正常值    系统识别8个cpu,那么load为8就是临界值,高于8就属于over load3) 系统识别cpu    逻辑处理器的数量    2个四核 = 4个双核 = 8个单核4) 理想值    0.7乘以内核数</code></pre><h2 id="2-CPU使用率"><a href="#2-CPU使用率" class="headerlink" title="2.CPU使用率"></a>2.CPU使用率</h2><pre><code>1) 一段内CPU使用状况的统计    一个时间段内CPU被占用的情况2) CPU高不等于load高    经常出现cpu使用100%,但load不高    cpu的运算功能，那么此时cpu的使用率可能达到100%，但是cpu的工作负载则是趋近于“1”3) load高不等于CPU高    当对硬盘读写时,出现IO等待,实际上CPU已经被切换了,该任务一直处于等待状态,这样的任务过多,导致队列长度过大,就体现到负载过大因此CPU高不等于load高,load高不等于CPU高4) 理想值    60%以下</code></pre><h2 id="3-cpu的相关信息"><a href="#3-cpu的相关信息" class="headerlink" title="3.cpu的相关信息"></a>3.cpu的相关信息</h2><pre><code>/proc/cpuinfo文件</code></pre><h2 id="4-CPU活动的信息"><a href="#4-CPU活动的信息" class="headerlink" title="4.CPU活动的信息"></a>4.CPU活动的信息</h2><pre><code>/proc/stat文件</code></pre><h2 id="5-某一进程所有的活动的信息"><a href="#5-某一进程所有的活动的信息" class="headerlink" title="5.某一进程所有的活动的信息"></a>5.某一进程所有的活动的信息</h2><pre><code>/proc/&lt;pid&gt;/stat文件在多核的情况下top命令输出的cpu使用率实质是按cpu个数*100%计算的</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4.grep</title>
      <link href="/2018/01/13/2018-01-13-4.grep/"/>
      <url>/2018/01/13/2018-01-13-4.grep/</url>
      <content type="html"><![CDATA[<h2 id="1-基础正则表达式"><a href="#1-基础正则表达式" class="headerlink" title="1.基础正则表达式"></a>1.基础正则表达式</h2><pre><code>grep -[acinv] 搜索内容串 filename-a 以文本文件方式搜索-c 计算找到的符合行的次数-i 忽略大小写-n 顺便输出行号-v 反向选择，即找 没有搜索字符串的行</code></pre><h2 id="2-利用-搜索集合字符"><a href="#2-利用-搜索集合字符" class="headerlink" title="2.利用[]搜索集合字符"></a>2.利用[]搜索集合字符</h2><pre><code>-A是显示匹配后和它后面的n行。-B是显示匹配行和它前面的n行。-C是匹配行和它前后各n行。总体来说，-C覆盖面最大</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.linux常用命令</title>
      <link href="/2018/01/13/2018-01-13-2.linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/01/13/2018-01-13-2.linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="1-cat"><a href="#1-cat" class="headerlink" title="1.cat"></a>1.cat</h2><pre><code>功能    查看整个文件    cat file    创建一个文件    cat &gt; file    合并几个文件    cat file1 file2 &gt; file参数    -n    对所有输出行数编号    -b    对空白行不编号</code></pre><h2 id="2-sort"><a href="#2-sort" class="headerlink" title="2.sort"></a>2.sort</h2><pre><code>排序参数    -f     忽略大小写    -o    输出到指定文件    -r     倒序排列    -t    指定排序使用的分隔符    -n    按照数字排序    -u     输出行中去除重复行    -k    指定排序列使用    sort -u seq.txt    sort -r seq.txt -o seq.txt    sort -n -k2 -t: seq.txt</code></pre><h2 id="3-ssort-Smart"><a href="#3-ssort-Smart" class="headerlink" title="3.ssort(Smart)"></a>3.ssort(Smart)</h2><pre><code>比sort更快</code></pre><h2 id="4-uniq"><a href="#4-uniq" class="headerlink" title="4.uniq"></a>4.uniq</h2><pre><code>去除排序过的文件中的重复行参数    -i    忽略大小写    -c     计数,在行首位置输出该行重复次数    -u     只显示唯一行    -d    只显示重复行使用    sort file | uniq -c    sort file | uniq -dc</code></pre><h2 id="5-cut"><a href="#5-cut" class="headerlink" title="5.cut"></a>5.cut</h2><pre><code>从文本或文件流中提取文本列参数    -d     分隔符    -f     取第几段    -c     以字符的单位取出固定字符区间使用    echo $PATH | cut -d: -f 3,5    echo $PATH | cut -d: -f 3-</code></pre><h2 id="6-wc"><a href="#6-wc" class="headerlink" title="6.wc"></a>6.wc</h2><pre><code>统计文件里面有多少单词,多少行,多少字符参数    -l    行    -w     英文单字    -m    字符使用    wc /etc/passwd    wc -l /etc/passwd</code></pre><h2 id="7-top"><a href="#7-top" class="headerlink" title="7.top"></a>7.top</h2><pre><code>性能分析,实时显示系统中各个进程的资源占用统计信息    第一行        当前时间,系统运行时间,登录用户数,系统负载(1分钟,5分钟,15分钟)    第二行        total:进程总数,running:正运行进程数,sleeping:睡眠进程数,stopped:停止进程数,zombie:僵尸进程数,    第三行        us:用户空间占用CPU百分比,sy:内核空间占用,id:空闲CPU百分比    第四行        total:总内存,used:使用的内存总量,free:空闲内存总量,buffers:用作缓存的内存量进程信息    PID        进程id    PPID    父进程id    VIRT    进程使用虚拟内存总量,单位kb    %CPU     CPU占用百分比    %MEM    进程使用内存百分比    TIME+    进程使用CPU时间总计    COMMAND    命令名快捷键    f         选择显示的内容,a-z选择    o        改变列的显示排序</code></pre><h2 id="8-ps"><a href="#8-ps" class="headerlink" title="8.ps"></a>8.ps</h2><pre><code>Process Status,列出系统运行的进程参数使用    ps -ef | grep ssh    显示所有进程信息，连同命令行    ps -aux                列出目前所有的正在内存当中的程序</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>7.zip</title>
      <link href="/2018/01/13/2018-01-13-7.zip/"/>
      <url>/2018/01/13/2018-01-13-7.zip/</url>
      <content type="html"><![CDATA[<h2 id="1-zip压缩"><a href="#1-zip压缩" class="headerlink" title="1.zip压缩"></a>1.zip压缩</h2><pre><code>zip -r /tmp/products.zip /tmp/products</code></pre><h2 id="2-unzip解压"><a href="#2-unzip解压" class="headerlink" title="2.unzip解压"></a>2.unzip解压</h2><pre><code>unzip /tmp/products.zip</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DeltaWalker</title>
      <link href="/2018/01/12/2018-01-12-DeltaWalker/"/>
      <url>/2018/01/12/2018-01-12-DeltaWalker/</url>
      <content type="html"><![CDATA[<h3 id="DeltaWalker"><a href="#DeltaWalker" class="headerlink" title="DeltaWalker"></a>DeltaWalker</h3><p>在你的home目录下（我的是linux,就是～目录，WINDOWS应该是USER那个目录吧，这个没去找过），<br>有个叫.XXXXXX.dwk的文件，这里的X就是字母和数字，这个是保存注册信息的，<br>删除他等于重置了注册信息，打开软件时就不报那个了。</p>]]></content>
      
      
        <tags>
            
            <tag> 注册码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>split</title>
      <link href="/2018/01/11/2018-01-11-split/"/>
      <url>/2018/01/11/2018-01-11-split/</url>
      <content type="html"><![CDATA[<h3 id="mysql-split"><a href="#mysql-split" class="headerlink" title="mysql split"></a>mysql split</h3><p>mysql本身并没有split函数，我们可以实现类似功能的自定义函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION split(</span><br><span class="line">  x VARCHAR(255),</span><br><span class="line">  delim VARCHAR(12),</span><br><span class="line">  pos INT</span><br><span class="line">)</span><br><span class="line">RETURNS VARCHAR(255)</span><br><span class="line">RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(x, delim, pos),</span><br><span class="line">       LENGTH(SUBSTRING_INDEX(x, delim, pos -1)) + 1),</span><br><span class="line">       delim, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">SELECT split(&apos;a|bb|ccc|dd&apos;, &apos;|&apos;, 3) as third;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat跨域请求</title>
      <link href="/2018/01/11/2018-01-11-tomcat%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/01/11/2018-01-11-tomcat%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h3 id="tomcat跨域请求-Access-Control-Allow-Origin"><a href="#tomcat跨域请求-Access-Control-Allow-Origin" class="headerlink" title="tomcat跨域请求 Access-Control-Allow-Origin *"></a>tomcat跨域请求 Access-Control-Allow-Origin *</h3><p>当出现403跨域错误’Access-Control-Allow-Origin’，需要给Tomcat服务器配置响应的header参数</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><pre><code>#修改web.xml文件，把下面的修改，放到filter最前面，重启tomcat&lt;filter&gt;    &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.apache.catalina.filters.CorsFilter&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;CorsFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python火车票查询工具</title>
      <link href="/2018/01/11/2018-01-11-python%E7%81%AB%E8%BD%A6%E7%A5%A8%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/01/11/2018-01-11-python%E7%81%AB%E8%BD%A6%E7%A5%A8%E6%9F%A5%E8%AF%A2%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="python库"><a href="#python库" class="headerlink" title="python库"></a>python库</h3><pre><code>pip3 install requests prettytable docopt coloramarequests：   访问HTTP资源docopt：     参数解析工具prettytable：格式化信息打印colorama：   命令行着色工具</code></pre><h3 id="12306余票查询"><a href="#12306余票查询" class="headerlink" title="12306余票查询"></a>12306余票查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">from docopt import docopt</span><br><span class="line">from prettytable import PrettyTable</span><br><span class="line">from colorama import init, Fore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cli(from_station,to_station,date):</span><br><span class="line">    &quot;&quot;&quot;Command-line interface&quot;&quot;&quot;</span><br><span class="line">    url = (&apos;https://kyfw.12306.cn/otn/leftTicket/queryZ?&apos;+</span><br><span class="line">           &apos;leftTicketDTO.train_date=&#123;&#125;&amp;&apos;+</span><br><span class="line">           &apos;leftTicketDTO.from_station=&#123;&#125;&amp;&apos;+</span><br><span class="line">           &apos;leftTicketDTO.to_station=&#123;&#125;&amp;&apos;+</span><br><span class="line">           &apos;purpose_codes=ADULT&apos;).format(</span><br><span class="line">                date, from_station, to_station</span><br><span class="line">           )</span><br><span class="line">    r = requests.get(url, verify=False)</span><br><span class="line">    TrainsCollection(r.json())</span><br><span class="line"></span><br><span class="line">def TrainsCollection(result):</span><br><span class="line">    map=result[&apos;data&apos;][&apos;map&apos;]</span><br><span class="line">    data=result[&apos;data&apos;][&apos;result&apos;]</span><br><span class="line">    header = &apos;车次 始发站 终点站 开始 结束 历时 特等 一等 二等 高级软卧 软卧 动卧 硬卧 软座 硬座 无座 其他&apos;.split()</span><br><span class="line"></span><br><span class="line">    #数据解析</span><br><span class="line">    pt=PrettyTable()</span><br><span class="line">    pt._set_field_names(header)</span><br><span class="line">    pt.padding_width = 1</span><br><span class="line">    for item in data:</span><br><span class="line">        list=item.split(&apos;|&apos;)</span><br><span class="line">        pt.add_row([list[3],Fore.RED+map[list[6]]+Fore.RESET,map[list[7]],Fore.RED+list[8]+Fore.RESET,list[9],list[10],list[32],list[31],list[30],list[22],list[23],list[25],list[26],list[27],list[28],list[29],list[24]])</span><br><span class="line">    print(pt)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    cli(&apos;YAK&apos;,&apos;JNK&apos;,&apos;2018-01-16&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx跨域请求</title>
      <link href="/2018/01/11/2018-01-11-nginx%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
      <url>/2018/01/11/2018-01-11-nginx%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
      <content type="html"><![CDATA[<h3 id="nginx跨域请求-Access-Control-Allow-Origin"><a href="#nginx跨域请求-Access-Control-Allow-Origin" class="headerlink" title="nginx跨域请求 Access-Control-Allow-Origin *"></a>nginx跨域请求 Access-Control-Allow-Origin *</h3><p>当出现403跨域错误’Access-Control-Allow-Origin’，需要给Nginx服务器配置响应的header参数</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><pre><code>#修改nginx.conf文件server {    add_header Access-Control-Allow-Origin *;    add_header Access-Control-Allow-Headers X-Requested-With;    add_header Access-Control-Allow-Methods GET,POST,OPTIONS;}</code></pre><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>1.Access-Control-Allow-Origin，服务器默认不被允许跨域。</p><p>给Nginx服务器设置<code>Access-Control-Allow-Origin *</code>，表示服务器可以接收所有的请求源，接收跨域请求。</p><p>2.Access-Control-Allow-Headers 是为了防止出现当前请求Content-Type的值不被支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.</span><br></pre></td></tr></table></figure></p><p>3.Access-Control-Allow-Methods 是为了防止出现以下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat连接超时</title>
      <link href="/2018/01/11/2018-01-11-tomcat%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/"/>
      <url>/2018/01/11/2018-01-11-tomcat%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/</url>
      <content type="html"><![CDATA[<h2 id="tomcat连接超时"><a href="#tomcat连接超时" class="headerlink" title="tomcat连接超时"></a>tomcat连接超时</h2><p>tomcat7的请求不会超时，tomcat7不会主动断开跟客户端的链接。</p><h3 id="connectionTimeout"><a href="#connectionTimeout" class="headerlink" title="connectionTimeout"></a>connectionTimeout</h3><p>默认值 60s</p><p>在接受连接之后等待的请求URI的毫秒数。</p><p>标准server.xml将其设置为20000（即20秒），-1来表示无（即无限）超时。</p><h3 id="keepAliveTimeout"><a href="#keepAliveTimeout" class="headerlink" title="keepAliveTimeout"></a>keepAliveTimeout</h3><p>默认值 connectionTimeout设置的值</p><p>在关闭连接之前等待另一个HTTP请求的毫秒数。</p><h3 id="soTimeout"><a href="#soTimeout" class="headerlink" title="soTimeout"></a>soTimeout</h3><p>等于connectionTimeout。</p><h2 id="测试connectionTimeout"><a href="#测试connectionTimeout" class="headerlink" title="测试connectionTimeout"></a>测试connectionTimeout</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#将server.xml的connectionTimeout设为5s，</span><br><span class="line">nc 172.17.5.80 8080     #5s后连接断开</span><br></pre></td></tr></table></figure><p>#connectionTimeout，是建立链接后等待请求的时间，不是请求超时的时间。</p>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx超时</title>
      <link href="/2018/01/11/2018-01-11-nginx%E8%B6%85%E6%97%B6/"/>
      <url>/2018/01/11/2018-01-11-nginx%E8%B6%85%E6%97%B6/</url>
      <content type="html"><![CDATA[<h3 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h3><pre><code>http{    keepalive_timeout 600;    proxy_connect_timeout 600;    proxy_read_timeout 600;    proxy_send_timeout 600;    client_header_timeout 600;    client_body_timeout 600;}</code></pre><h3 id="client-header-timeout"><a href="#client-header-timeout" class="headerlink" title="client_header_timeout"></a>client_header_timeout</h3><p>默认值 60s<br>指定等待client发送一个请求头的超时时间（例如：GET / HTTP/1.1）<br>仅当在一次read中，没有收到请求头，才会算成超时。<br>如果在超时时间内，client没发送任何东西，nginx返回HTTP状态码408(“Request timed out”)</p><h3 id="client-body-timeout"><a href="#client-body-timeout" class="headerlink" title="client_body_timeout"></a>client_body_timeout</h3><p>默认值 60s<br>该指令设置请求体（request body）的读超时时间。<br>仅当在一次readstep中，没有得到请求体，就会设为超时。<br>超时后，nginx返回HTTP状态码408(“Request timed out”)</p><h3 id="keepalive-timeout"><a href="#keepalive-timeout" class="headerlink" title="keepalive_timeout"></a>keepalive_timeout</h3><p>默认值 75s<br>第一个参数指定了与client的keep-alive连接超时时间。服务器将会在这个时间后关闭连接。<br>可选的第二个参数指定了在响应头Keep-Alive: timeout=time中的time值。<br>这个头能够让一些浏览器主动关闭连接，这样服务器就不必要去关闭连接了。<br>没有这个参数，nginx不会发送Keep-Alive响应头（尽管并不是由这个头来决定连接是否“keep-alive”）</p><h3 id="lingering-timeout"><a href="#lingering-timeout" class="headerlink" title="lingering_timeout"></a>lingering_timeout</h3><p>默认值 5s<br>lingering_close生效后，在关闭连接前，会检测是否有用户发送的数据到达服务器，<br>如果超过lingering_timeout时间后还没有数据可读，就直接关闭连接；<br>否则，必须在读取完连接缓冲区上的数据并丢弃掉后才会关闭连接。</p><h3 id="resolver-timeout"><a href="#resolver-timeout" class="headerlink" title="resolver_timeout"></a>resolver_timeout</h3><p>默认值 30s<br>该指令设置DNS解析超时时间</p><h3 id="proxy-connect-timeout！！！"><a href="#proxy-connect-timeout！！！" class="headerlink" title="proxy_connect_timeout！！！"></a>proxy_connect_timeout！！！</h3><p>默认值 60s<br>定义与代理服务器建立连接的超时时间。这个超时通常不能超过75秒。</p><h3 id="proxy-read-timeout"><a href="#proxy-read-timeout" class="headerlink" title="proxy_read_timeout"></a>proxy_read_timeout</h3><p>默认值 60s<br>该指令设置与代理服务器的读超时时间。<br>它决定了nginx会等待多长时间来获得请求的响应。<br>这个时间不是获得整个response的时间，而是两次reading操作的时间。</p><h3 id="proxy-send-timeout"><a href="#proxy-send-timeout" class="headerlink" title="proxy_send_timeout"></a>proxy_send_timeout</h3><p>默认值 60s<br>这个指定设置了发送请求给upstream服务器的超时时间。<br>超时设置不是为了整个发送期间，而是在两次write操作期间。<br>如果超时后，upstream没有收到新的数据，nginx会关闭连接</p><h3 id="proxy-upstream-fail-timeout"><a href="#proxy-upstream-fail-timeout" class="headerlink" title="proxy_upstream_fail_timeout"></a>proxy_upstream_fail_timeout</h3><p>默认值 10s<br>Upstream模块下 server指令的参数，<br>设置了某一个upstream后端失败了指定次数（max_fails）后，<br>该后端不可操作的时间，默认为10秒</p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python图片转字符画</title>
      <link href="/2018/01/09/2018-01-09-python%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/"/>
      <url>/2018/01/09/2018-01-09-python%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%94%BB/</url>
      <content type="html"><![CDATA[<h3 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h3><pre><code>图片转字符画小工具使用pillow、argparse</code></pre><h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><pre><code>字符画是一系列字符的组合，我们可以把字符看作大块的像素，一个字符能表现一种颜色，字符越多、表现的颜色越多，图片也更有层次。我们要转换一张彩色的图片，这么多的颜色，怎么对应到单色字符画上去？这就用到灰度值。灰度值：黑白图像中点的颜色深度，从0到255。灰度值公式：    gray=0.2126*r+0.7152*g+0.0722*b</code></pre><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import argparse</span><br><span class="line"></span><br><span class="line"># 灰度值小（暗）的用列表开头的符号，灰度值大（亮）的用列表末尾的符号。</span><br><span class="line">ascii_char = list(&quot;$@B%8&amp;WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1&#123;&#125;[]?-_+~&lt;&gt;i!lI;:,\&quot;^`&apos;. &quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将256灰度映射到列表的70个字符上</span><br><span class="line">def get_char(r, g, b, alpha=256):</span><br><span class="line">    if alpha == 0:</span><br><span class="line">        return &apos; &apos;</span><br><span class="line">    length = len(ascii_char)</span><br><span class="line">    gray = int(0.2126 * r + 0.7152 * g + 0.0722 * b)</span><br><span class="line">    unit = (256.0 + 1) / length</span><br><span class="line">    return ascii_char[int(gray / unit)]</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    # 获取参数</span><br><span class="line">    IMG = &apos;ascii_dora.png&apos;</span><br><span class="line">    OUTPUT=&apos;output.txt&apos;</span><br><span class="line">    WIDTH = 40</span><br><span class="line">    HEIGHT = 40</span><br><span class="line">    im = Image.open(IMG)</span><br><span class="line">    im = im.resize((WIDTH, HEIGHT), Image.NEAREST)</span><br><span class="line">    txt = &quot;&quot;</span><br><span class="line">    for i in range(HEIGHT):</span><br><span class="line">        for j in range(WIDTH):</span><br><span class="line">            txt += get_char(*im.getpixel((j, i)))</span><br><span class="line">        txt += &apos;\n&apos;</span><br><span class="line">    print(txt)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7安装tomcat7</title>
      <link href="/2017/12/28/2017-12-28-centos7%E5%AE%89%E8%A3%85tomcat7/"/>
      <url>/2017/12/28/2017-12-28-centos7%E5%AE%89%E8%A3%85tomcat7/</url>
      <content type="html"><![CDATA[<h3 id="安装tomcat7"><a href="#安装tomcat7" class="headerlink" title="安装tomcat7"></a>安装tomcat7</h3><pre><code>wget http://mirror.bit.edu.cn/apache/tomcat/tomcat-7/v7.0.82/bin/apache-tomcat-7.0.82.tar.gztar zxvf apache-tomcat-7.0.82.tar.gzmv apache-tomcat-7.0.82 /usr/local/tomcat7cd /usr/local/tomcat7/</code></pre><h3 id="设置用户名、密码"><a href="#设置用户名、密码" class="headerlink" title="设置用户名、密码"></a>设置用户名、密码</h3><pre><code>cd conf &amp;&amp; vi tomcat-users.xml    &lt;role rolename=&quot;manager-gui&quot;/&gt;    &lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui&quot;/&gt;</code></pre><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre><code>#centos6service iptables stopchkconfig iptables off#centos7systemctl stop firewalld.service #停止firewallsystemctl disable firewalld.service #禁止firewall开机启动</code></pre><h2 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h2><pre><code>/usr/local/tomcat7/bin/startup.sh</code></pre>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7安装jdk</title>
      <link href="/2017/12/28/2017-12-28-centos7%E5%AE%89%E8%A3%85jdk/"/>
      <url>/2017/12/28/2017-12-28-centos7%E5%AE%89%E8%A3%85jdk/</url>
      <content type="html"><![CDATA[<h2 id="卸载系统自带的OpenJDK"><a href="#卸载系统自带的OpenJDK" class="headerlink" title="卸载系统自带的OpenJDK"></a>卸载系统自带的OpenJDK</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">rpm -qa | grep java</span><br><span class="line"></span><br><span class="line">#卸载</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.102-4.b14.el7.x86_64</span><br><span class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.111-2.6.7.8.el7.x86_64</span><br><span class="line"></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h2 id="下载8u151-jdk"><a href="#下载8u151-jdk" class="headerlink" title="下载8u151_jdk"></a>下载8u151_jdk</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.oracle.com/otn-pub/java/jdk/8u151-b12/e758a0de34e24606bca991d704f6dcbf/jdk-8u151-linux-x64.tar.gz?AuthParam=1514427661_e4f287cc9b671bc0608edc5b397887d7</span><br><span class="line">tar -zxvf jdk-8u151-linux-x64.tar.gz\?AuthParam\=1514427661_e4f287cc9b671bc0608edc5b397887d7</span><br><span class="line">mv jdk1.8.0_151/ /usr/local/</span><br></pre></td></tr></table></figure><h2 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line">    #java environment</span><br><span class="line">    export JAVA_HOME=/usr/local/jdk1.8.0_151</span><br><span class="line">    export CLASSPATH=.:$&#123;JAVA_HOME&#125;/jre/lib/rt.jar:$&#123;JAVA_HOME&#125;/lib/dt.jar:$&#123;JAVA_HOME&#125;/lib/tools.jar</span><br><span class="line">    export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>centos7安装nginx</title>
      <link href="/2017/12/28/2017-12-28-centos7%E5%AE%89%E8%A3%85nginx/"/>
      <url>/2017/12/28/2017-12-28-centos7%E5%AE%89%E8%A3%85nginx/</url>
      <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><pre><code>yum -y install gcc-c++yum -y install zlib zlib-devel openssl openssl--devel pcre pcre-devel</code></pre><h3 id="下载nginx"><a href="#下载nginx" class="headerlink" title="下载nginx"></a>下载nginx</h3><pre><code>wget http://nginx.org/download/nginx-1.7.4.tar.gz</code></pre><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre><code>tar -zxvf nginx-1.7.4.tar.gzcd nginx-1.7.4./configure --prefix=/usr/local/nginxmake &amp;&amp; make install</code></pre><h3 id="设置负载均衡"><a href="#设置负载均衡" class="headerlink" title="设置负载均衡"></a>设置负载均衡</h3><pre><code>vi /usr/local/nginx/conf/nginx.conf    upstream resinserver {        server 172.17.254.51:8080;        server 172.17.254.52:8080;    }    location / {        root   html;        index  index.html index.htm;        proxy_pass http://resinserver;        proxy_redirect default;    }</code></pre><h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><pre><code>/usr/local/nginx/sbin/nginx</code></pre><h3 id="添加开机自启动"><a href="#添加开机自启动" class="headerlink" title="添加开机自启动"></a>添加开机自启动</h3><pre><code>vi /etc/init.d/nginx    #!/bin/sh     #     # nginx - this script starts and stops the nginx daemin     #    # chkconfig:   - 85 15    # description:  Nginx is an HTTP(S) server, HTTP(S) reverse \    #               proxy and IMAP/POP3 proxy server    # processname: nginx    # config:      /usr/local/nginx/conf/nginx.conf    # pidfile:     /usr/local/nginx/logs/nginx.pid    # Source function library.    . /etc/rc.d/init.d/functions    # Source networking configuration.     . /etc/sysconfig/network     # Check that networking is up.     [ &quot;$NETWORKING&quot; = &quot;no&quot; ] &amp;&amp; exit 0     nginx=&quot;/usr/local/nginx/sbin/nginx&quot;     prog=$(basename $nginx)     NGINX_CONF_FILE=&quot;/usr/local/nginx/conf/nginx.conf&quot;    lockfile=/var/lock/subsys/nginx     start() {         [ -x $nginx ] || exit 5         [ -f $NGINX_CONF_FILE ] || exit 6        echo -n $&quot;Starting $prog: &quot;         daemon $nginx -c $NGINX_CONF_FILE         retval=$?         echo         [ $retval -eq 0 ] &amp;&amp; touch $lockfile         return $retval     }     stop() {         echo -n $&quot;Stopping $prog: &quot;         killproc $prog -QUIT        retval=$?         echo         [ $retval -eq 0 ] &amp;&amp; rm -f $lockfile         return $retval     }     restart() {         configtest || return $?         stop         start     }     reload() {         configtest || return $?         echo -n $&quot;Reloading $prog: &quot;         killproc $nginx -HUP         RETVAL=$?         echo     }     force_reload() {         restart     }     configtest() {       $nginx -t -c $NGINX_CONF_FILE     }     rh_status() {         status $prog     }     rh_status_q() {          rh_status &gt;/dev/null 2&gt;&amp;1     }       case &quot;$1&quot; in         start)             rh_status_q &amp;&amp; exit 0             $1             ;;         stop)             rh_status_q || exit 0             $1             ;;         restart|configtest)             $1              ;;         reload)            rh_status_q || exit 7             $1             ;;         force-reload)             force_reload             ;;        status)             rh_status             ;;         condrestart|try-restart)             rh_status_q || exit 0                 ;;         *)             echo $&quot;Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}&quot;             exit 2     esacchkconfig nginx on</code></pre>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.centos7安装python3</title>
      <link href="/2017/12/28/2017-12-28-2.centos7%E5%AE%89%E8%A3%85python3/"/>
      <url>/2017/12/28/2017-12-28-2.centos7%E5%AE%89%E8%A3%85python3/</url>
      <content type="html"><![CDATA[<h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><pre><code>yum install -y ncyum install -y gccyum install -y openssl-devel</code></pre><h2 id="下载python3-6"><a href="#下载python3-6" class="headerlink" title="下载python3.6"></a>下载python3.6</h2><pre><code>wget https://www.python.org/ftp/python/3.6.4/Python-3.6.4.tgz</code></pre><h2 id="解压、安装"><a href="#解压、安装" class="headerlink" title="解压、安装"></a>解压、安装</h2><pre><code>tar -zxvf Python-3.6.4.tgzcd Python-3.6.4./configure --prefix=/opt/python --enable-sharedmake &amp;&amp; make installcd ~/Python-3.6.4 &amp;&amp; cp libpython3.6m.so.1.0 /usr/lib &amp;&amp; cp libpython3.6m.so.1.0 /usr/lib64</code></pre><h2 id="把python3设为默认"><a href="#把python3设为默认" class="headerlink" title="把python3设为默认"></a>把python3设为默认</h2><pre><code>mv /usr/bin/python /usr/bin/pythonbkln -s /opt/python/bin/python3.6 /usr/bin/pythonln -s /opt/python/bin/pip3 /usr/local/bin/pip3vi /usr/bin/yum</code></pre><p>#修改前</p><pre><code>#!/usr/bin/python#修改后（系统默认python版本）#!/usr/bin/python2.6</code></pre>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>adb connect 连接失败</title>
      <link href="/2017/12/25/2017-12-25-adb%20connect%20%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5/"/>
      <url>/2017/12/25/2017-12-25-adb%20connect%20%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5/</url>
      <content type="html"><![CDATA[<p>插入数据线,执行adb tcpip 5555</p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>adb模拟用户登录</title>
      <link href="/2017/12/25/2017-12-25-adb%E6%A8%A1%E6%8B%9F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
      <url>/2017/12/25/2017-12-25-adb%E6%A8%A1%E6%8B%9F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<h3 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h3><pre><code>adb -s 10.6.4.136 shell input tap 360 720sleep 1</code></pre><h3 id="2-手入力"><a href="#2-手入力" class="headerlink" title="2.手入力"></a>2.手入力</h3><pre><code>adb  -s 10.6.4.136 shell input tap 360 700adb  -s 10.6.4.136 shell input text &quot;10085467&quot;adb  -s 10.6.4.136 shell input tap 600 1250adb  -s 10.6.4.136 shell input text &quot;zyg122401&quot;adb  -s 10.6.4.136 shell input tap 600 1250sleep 1</code></pre><h3 id="3-退出"><a href="#3-退出" class="headerlink" title="3.退出"></a>3.退出</h3><pre><code>adb  -s 10.6.4.136 shell input tap 600 1100adb  -s 10.6.4.136 shell input tap 250 800sleep 1echo 1</code></pre>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos 7 调整root分区</title>
      <link href="/2017/12/25/2017-12-25-Centos%207%20%E8%B0%83%E6%95%B4root%E5%88%86%E5%8C%BA/"/>
      <url>/2017/12/25/2017-12-25-Centos%207%20%E8%B0%83%E6%95%B4root%E5%88%86%E5%8C%BA/</url>
      <content type="html"><![CDATA[<p>把/home内容备份，然后将/home文件系统所在的逻辑卷删除，扩大/root文件系统，新建/home ，恢复/home内容</p><h2 id="扩大root分区"><a href="#扩大root分区" class="headerlink" title="扩大root分区"></a>扩大root分区</h2><pre><code>#1.查看分区    df -h#2.备份home分区文件    tar cvf /tmp/home.tar /home#3.卸载/home，如果无法卸载，先终止使用/home文件系统的进程    fuser -km /home/    umount /home#4.删除/home所在的lv    lvremove /dev/mapper/centos-home#5.扩展/root所在的lv，增加100G    lvextend -L +100G /dev/mapper/centos-root#6.扩展/root文件系统    xfs_growfs /dev/mapper/centos-root#7.重新创建home lv    lvcreate -L 50G -n /dev/mapper/centos-home#8. 创建文件系统    mkfs.xfs  /dev/mapper/centos-home#9.挂载home    mount /dev/mapper/centos-home#10.home文件恢复    tar xvf /tmp/home.tar -C /home/    cd /home/home/    mv * ../</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>batch_SQL Server 同期数据到Postgres</title>
      <link href="/2017/12/25/2017-12-25-batch_SQL%20Server%20%E5%90%8C%E6%9C%9F%E6%95%B0%E6%8D%AE%E5%88%B0Postgres/"/>
      <url>/2017/12/25/2017-12-25-batch_SQL%20Server%20%E5%90%8C%E6%9C%9F%E6%95%B0%E6%8D%AE%E5%88%B0Postgres/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/bin/bash -xv</span><br><span class="line"># 从SQL Server 同期数据到Postgres</span><br><span class="line">export PATH=/home/SMART_TRIAL:/home/SMART:/usr/local/bin:/$&#123;PATH&#125;</span><br><span class="line">export LANG=ja_JP.UTF-8</span><br><span class="line"></span><br><span class="line">&gt;マスタファイル開く</span><br><span class="line"></span><br><span class="line">#1.SQLIP</span><br><span class="line">#2.SQLDB名</span><br><span class="line">#3.SQLUserGroup(dbo)</span><br><span class="line">#4.SQLテーブル名</span><br><span class="line">#5.SQL接続ユーザー名</span><br><span class="line">#6.SQL接続パスワード</span><br><span class="line">#7.日付列</span><br><span class="line">cat /tmp/baihen/tablelist_kanzen | head -n 2 |</span><br><span class="line">while read svip dbname ugp tname user pwd cols;</span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">&gt;Step1.SQLからデータ抽出</span><br><span class="line"></span><br><span class="line">#echo &quot;select * from &quot;$&#123;tname&#125;&quot; with (nolock)&quot; |</span><br><span class="line">#java -jar /home/SMART_TRIAL/jd2s.jar -s$&#123;svip&#125;:$&#123;dbname&#125;:$&#123;user&#125;:$&#123;pwd&#125; -q- &gt;/tmp/baihen/table_$&#123;tname&#125;</span><br><span class="line">#deom: echo &quot;select top 10 * from M_DATE &quot; | java -jar /home/SMART_TRIAL/jd2s.jar -s172.17.254.213:dbcyber:sa:1234 -q- &gt;/tmp/M_DATE</span><br><span class="line">echo &quot;select * from dbcyber.dbo.NaFuDaPrintHistory where CONVERT(CHAR(8), registered, 112) = 20170208&quot; | java -jar /home/SMART_TRIAL/jd2s.jar -s10.100.2.118:dbcyber:sa:dbadmin -q- &gt;/tmp/10.100.2.118</span><br><span class="line">&gt;Step2.日付列の特殊処理</span><br><span class="line"></span><br><span class="line">cp /tmp/baihen/table_$&#123;tname&#125; /tmp/baihen/table_$&#123;tname&#125;_tmp</span><br><span class="line"></span><br><span class="line">if [ $cols != &quot;0&quot; ] ; then</span><br><span class="line">echo $&#123;cols&#125; | sed s/_/ /g | tov |</span><br><span class="line">while read num ; do</span><br><span class="line">echo $&#123;num&#125;</span><br><span class="line"></span><br><span class="line">#cat /tmp/baihen/table_$&#123;tname&#125;_tmp | awk $&quot;$&#123;num&#125;&quot;=($&quot;$&#123;num&#125;&quot;==&quot;19000101000000&quot;?&quot;_&quot;:substr($&quot;$&#123;num&#125;&quot;,1,4)&quot;/&quot;substr($&quot;$&#123;num&#125;&quot;,5,2)&quot;/&quot;substr($&quot;$&#123;num&#125;&quot;,7,2)&quot;_&quot;substr($&quot;$&#123;num&#125;&quot;,9,2)&quot;:&quot;substr($&quot;$&#123;num&#125;&quot;,11,2)&quot;:&quot;substr($&quot;$&#123;num&#125;&quot;,13,2)) &gt;/tmp/baihen/tmp</span><br><span class="line"></span><br><span class="line">cat /tmp/baihen/table_$&#123;tname&#125;_tmp | awk $&quot;$&#123;num&#125;&quot;=substr($&quot;$&#123;num&#125;&quot;,1,4)&quot;/&quot;substr($&quot;$&#123;num&#125;&quot;,5,2)&quot;/&quot;substr($&quot;$&#123;num&#125;&quot;,7,2)&quot;_&quot;substr($&quot;$&#123;num&#125;&quot;,9,2)&quot;:&quot;substr($&quot;$&#123;num&#125;&quot;,11,2)&quot;:&quot;substr($&quot;$&#123;num&#125;&quot;,13,2) &gt;/tmp/baihen/tmp</span><br><span class="line">mv /tmp/baihen/tmp /tmp/baihen/table_$&#123;tname&#125;_tmp</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&gt;Step3.そのた処理</span><br><span class="line"></span><br><span class="line">cat /tmp/baihen/table_$&#123;tname&#125;_tmp | sed s/ /,/g;s/_/ /g;s/, ,/,\\N,/g;s/, ,/,\\N,/g;s/, /,\\N/g | gzip -cf &gt;table_$&#123;tname&#125;.gz</span><br><span class="line"></span><br><span class="line">rm /tmp/baihen/table_$&#123;tname&#125;_tmp</span><br><span class="line"></span><br><span class="line">&gt;Step4.処理後のPostgreへINPUTのファイルをPostgreサーバーへ送付(圧縮ファイルで送付してから解凍)</span><br><span class="line"></span><br><span class="line">scp table_$&#123;tname&#125;.gz root@10.100.2.90:/tmp/data</span><br><span class="line">ssh -n root@10.100.2.90 &quot;gunzip /tmp/data/table_$&#123;tname&#125;.gz&quot;</span><br><span class="line"></span><br><span class="line">&gt;Step5.Postgreへ投入対象テーブルクリアして、データ投入</span><br><span class="line"></span><br><span class="line">ssh -n root@10.100.2.90 &quot; /opt/postgres/9.3/bin/psql -U postgres -d $&#123;dbname&#125;  -t -p 5432 -c \&quot;truncate table $&#123;tname&#125; ; copy $&#123;tname&#125; from /tmp/data/table_$&#123;tname&#125; DELIMITER ,;\&quot;&quot;</span><br><span class="line"></span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>batch_判断手机adb连接</title>
      <link href="/2017/12/25/2017-12-25-batch_%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BAadb%E8%BF%9E%E6%8E%A5/"/>
      <url>/2017/12/25/2017-12-25-batch_%E5%88%A4%E6%96%AD%E6%89%8B%E6%9C%BAadb%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 判断pacer是不是开机</span><br><span class="line"></span><br><span class="line">for i in `seq 254`</span><br><span class="line">do</span><br><span class="line">    ip=192.168.126.$i</span><br><span class="line">    nc -z $ip 5555 &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">    [ $? -eq 0 ] &amp;&amp; echo &quot;$ip is alive&quot;  || echo &quot;&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eclipse修改workspace</title>
      <link href="/2017/12/25/2017-12-25-eclipse%E4%BF%AE%E6%94%B9workspace/"/>
      <url>/2017/12/25/2017-12-25-eclipse%E4%BF%AE%E6%94%B9workspace/</url>
      <content type="html"><![CDATA[<h2 id="打开preference，输入workspace检索，勾选Prompt-workspace-on-startup"><a href="#打开preference，输入workspace检索，勾选Prompt-workspace-on-startup" class="headerlink" title="打开preference，输入workspace检索，勾选Prompt workspace on startup"></a>打开preference，输入workspace检索，勾选Prompt workspace on startup</h2><p><img src="http://img.blog.csdn.net/20170308113506399?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGVsbG9fenln/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ftp上传</title>
      <link href="/2017/12/25/2017-12-25-ftp%E4%B8%8A%E4%BC%A0/"/>
      <url>/2017/12/25/2017-12-25-ftp%E4%B8%8A%E4%BC%A0/</url>
      <content type="html"><![CDATA[<h3 id="ftp上传文件"><a href="#ftp上传文件" class="headerlink" title="ftp上传文件"></a>ftp上传文件</h3><p>   ftp -s:ftp1.bat</p><pre><code>open 192.168.4.104anonymousanonymouslcd AppData\Roaming\MicroSIPcd SIPbinaryget Contacts.xmlget MicroSIP.iniClosequit</code></pre>]]></content>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>eclipse常用快捷键</title>
      <link href="/2017/12/25/2017-12-25-eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2017/12/25/2017-12-25-eclipse%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h2 id="Eclipse-快捷键"><a href="#Eclipse-快捷键" class="headerlink" title="Eclipse 快捷键"></a>Eclipse 快捷键</h2><pre><code>编辑Ctrl+1 快速修复（比如import类、try catch等）Ctrl+Shift+F 格式化当前代码Ctrl+Shift+M 导入importCtrl+Shift+O 去除多余importAlt+/         内容辅助Ctrl+Alt+↓     复制当前行到下一行（复制增加）Ctrl+Alt+↑     复制当前行到上一行（复制增加）选择Alt+Shift+↑    选择封装元素Alt+Shift+←    选择上一个元素Alt+Shift+→    选择下一个元素搜索Ctrl+J    查找Ctrl+Shift+U    列出所有包含字符串的行Ctrl+G            工作区声明Ctrl+Shift+G     工作区引用Ctrl+Shift+T     搜索类Ctrl+Shift+R    搜索文件Ctrl+E          打开当前文件列表Ctrl+PageUp/PageDown    切换已经打开的文件调试Ctrl+Shift+D     显示变量值Ctrl+Shift+B    设断点Ctrl+R            运行至(节省很多断点)重构Alt+Shift+R        重命名Alt+Shift+M        抽取方法其他Ctrl+M            最大化当前ViewCtrl+W            关闭当前View</code></pre>]]></content>
      
      
        <tags>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>md5 authentication failed</title>
      <link href="/2017/12/25/2017-12-25-md5%20authentication%20failed/"/>
      <url>/2017/12/25/2017-12-25-md5%20authentication%20failed/</url>
      <content type="html"><![CDATA[<p>Unable to connect to server:</p><p>ERROR: md5 authentication failed</p><p>DETAIL: password does not match</p><h2 id="1-执行sql语句-获取用户md5"><a href="#1-执行sql语句-获取用户md5" class="headerlink" title="1.执行sql语句,获取用户md5"></a>1.执行sql语句,获取用户md5</h2><pre><code>select rolname,rolpassword from pg_authid</code></pre><h2 id="2-pgpool添加用户"><a href="#2-pgpool添加用户" class="headerlink" title="2.pgpool添加用户"></a>2.pgpool添加用户</h2><pre><code>cd /etc/pgpool-IIvi pool_passwd    postgres:md52a8e01d8bbbc4bfff072e0eb3e47e35f</code></pre><h2 id="3-重新加载配置文件"><a href="#3-重新加载配置文件" class="headerlink" title="3.重新加载配置文件"></a>3.重新加载配置文件</h2><pre><code>pgpool -F pool_passwd reload</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pgpool添加用户</title>
      <link href="/2017/12/25/2017-12-25-pgpool%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
      <url>/2017/12/25/2017-12-25-pgpool%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</url>
      <content type="html"><![CDATA[<h2 id="1-pgpool添加用户"><a href="#1-pgpool添加用户" class="headerlink" title="1.pgpool添加用户"></a>1.pgpool添加用户</h2><pre><code>cd /etc/pgpool-IIvi pool_passwd</code></pre><h2 id="2-执行sql语句-获取md5"><a href="#2-执行sql语句-获取md5" class="headerlink" title="2.执行sql语句,获取md5"></a>2.执行sql语句,获取md5</h2><pre><code>select rolname,rolpassword from pg_authidvi pool_passwd    appforpacer:md5e72cd3feac7ea1a6b372aa8a5fec0a7f</code></pre><h2 id="3-重新启动pgpool"><a href="#3-重新启动pgpool" class="headerlink" title="3.重新启动pgpool"></a>3.重新启动pgpool</h2><pre><code>ps -ef | grep pgpool | grep -v grep  | awk &apos;{system(&quot;kill -9 &quot; $2)}&apos;;rm -f /tmp/.s.PGSQL.9999 /tmp/.s.PGSQL.9898pgpool1)启动失败,10.100.2.89被占用    ifconfig etho0:0 down    pgpool</code></pre><h2 id="4-重新加载配置文件"><a href="#4-重新加载配置文件" class="headerlink" title="4.重新加载配置文件"></a>4.重新加载配置文件</h2><pre><code>pgpool [-c][-f config_file][-a hba_file][-F pcp_config_file] reloadpgpool -F pool_passwd reload</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>proxool简介</title>
      <link href="/2017/12/25/2017-12-25-proxool%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/12/25/2017-12-25-proxool%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>Proxool是一种Java数据库连接池技术</p><pre><code>易用，简装的连接池提供监控功能，便于发现连接泄露</code></pre><h2 id="1-proxool-xml文件"><a href="#1-proxool-xml文件" class="headerlink" title="1.proxool.xml文件"></a>1.proxool.xml文件</h2><pre><code>alias：    别名driver-url：    url连接串driver-class：    驱动类property    user        用户名    password    密码</code></pre><h2 id="2-最大连接数默认5个，超过这个数，再有请求时，就排在队列中等候，"><a href="#2-最大连接数默认5个，超过这个数，再有请求时，就排在队列中等候，" class="headerlink" title="2.最大连接数默认5个，超过这个数，再有请求时，就排在队列中等候，"></a>2.最大连接数默认5个，超过这个数，再有请求时，就排在队列中等候，</h2><pre><code>maximum-connection-count    最大连接数minimum-connection-count    最小连接数</code></pre><h2 id="3-proxool自动侦查各个连接状态的时间间隔，侦查到空闲的连接就马上回收，超时的销毁默认30s"><a href="#3-proxool自动侦查各个连接状态的时间间隔，侦查到空闲的连接就马上回收，超时的销毁默认30s" class="headerlink" title="3.proxool自动侦查各个连接状态的时间间隔，侦查到空闲的连接就马上回收，超时的销毁默认30s"></a>3.proxool自动侦查各个连接状态的时间间隔，侦查到空闲的连接就马上回收，超时的销毁默认30s</h2><pre><code>house-keeping-sleep-timemaximum-new-connections        没有空闲连接可以分配在队列中红等候的最大请求数，超过这个请求数的用户连接不在接受prototype-count             最少保持的空闲连接数house-keeping-test-sql         用于保持连接的测试语句</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scp免密码传输</title>
      <link href="/2017/12/25/2017-12-25-scp%E5%85%8D%E5%AF%86%E7%A0%81%E4%BC%A0%E8%BE%93/"/>
      <url>/2017/12/25/2017-12-25-scp%E5%85%8D%E5%AF%86%E7%A0%81%E4%BC%A0%E8%BE%93/</url>
      <content type="html"><![CDATA[<p>配置ssh信任访问                        </p><pre><code>主机：    172.17.254.90                cd ~/.ssh                    ssh-keygen -t rsa                    cat id_rsa.pub &gt;&gt;authorized_keys                 本机ssh信任    ssh-copy-id -i root@172.17.254.91                他机ssh信任    备机：    172.17.254.91                cd ~/.ssh                    ssh-keygen -t rsa                    cat id_rsa.pub &gt;&gt;authorized_keys                 本机ssh信任    ssh-copy-id -i root@172.17.254.90                他机ssh信任    </code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql转psql</title>
      <link href="/2017/12/25/2017-12-25-sql%E8%BD%ACpsql/"/>
      <url>/2017/12/25/2017-12-25-sql%E8%BD%ACpsql/</url>
      <content type="html"><![CDATA[<h2 id="1-日期转换"><a href="#1-日期转换" class="headerlink" title="1.日期转换"></a>1.日期转换</h2><pre><code>CONVERT(VARCHAR(10),GetDate(),23))to_char(now(),yyyy-MM-dd)extract(year from now());</code></pre><h2 id="2-日期加减"><a href="#2-日期加减" class="headerlink" title="2.日期加减"></a>2.日期加减</h2><pre><code>表示三天后select now() + interval 3 day;select to_char(now() + interval 7 day,yyyy-MM-dd)每月最后一天select  (to_char(now()+ interval 1 month ,yyyy-MM-) || 01 ) :: date - interval 1 day</code></pre><h2 id="3-使用游标"><a href="#3-使用游标" class="headerlink" title="3.使用游标"></a>3.使用游标</h2><pre><code>open v_result2 for SELECT * FROM tempJAN;return next v_result2;</code></pre><h2 id="4-isNULL-–-gt-COALESCE"><a href="#4-isNULL-–-gt-COALESCE" class="headerlink" title="4.isNULL –&gt; COALESCE"></a>4.isNULL –&gt; COALESCE</h2><p>5.@ –&gt; v_</p><p>6.[]</p><p>7.len –&gt; length</p><p>8.删除临时表</p><pre><code>if  exists( select * from information_schema.tables  where table_schema like pg_temp%  and table_name = lower(TempCompanyMsg) )then    drop table TempCompanyMsg;end if;CREATE temp table TempScore AS</code></pre><h2 id="9-dbo-–-gt-management"><a href="#9-dbo-–-gt-management" class="headerlink" title="9.dbo –&gt; management"></a>9.dbo –&gt; management</h2><p>10.CHARINDEX –&gt; POSITION(/-/ in v_ORDER_NUM_STR);</p><p>11.获取日期</p><pre><code>DATEDIFFextract(month from now());</code></pre><h2 id="12-查看游标内容"><a href="#12-查看游标内容" class="headerlink" title="12.查看游标内容"></a>12.查看游标内容</h2><pre><code>BEGIN ;select * from mdifdb.proc_md_BranchProductInfoReferWeb(4,4901331009,%%,%%,%%,,,,,,,,,,,,);fetch all in &quot;&lt;unnamed portal 1&gt;&quot;END ;</code></pre><h2 id="13-DATEDIFF"><a href="#13-DATEDIFF" class="headerlink" title="13.DATEDIFF"></a>13.DATEDIFF</h2><pre><code>date_part(day, 2015-01-15 17:05::timestamp - 2013-01-14 16:05::timestamp);</code></pre><h2 id="14-Round-KCountItem-1-0-SumCountItem-2-1"><a href="#14-Round-KCountItem-1-0-SumCountItem-2-1" class="headerlink" title="14.Round((KCountItem*1.0/SumCountItem),2,1)"></a>14.Round((KCountItem*1.0/SumCountItem),2,1)</h2><pre><code>trunc((KCountItem*1.0/SumCountItem),2)</code></pre><h2 id="15-返回结果集"><a href="#15-返回结果集" class="headerlink" title="15.返回结果集"></a>15.返回结果集</h2><pre><code>FOR v_rec IN    SELECT        id, branchcd, productcd, productname_read, brandname, specname_read,        makerprodcd, departmentcd, colorname, sizename, innercaseqty,            caseqty, orderunit, deliveryqty, costprice, salesprice, costsum,            salessum, suppliercd, suppliername, deliverydate, empcd, empname,            commitflag, author, registered, maintainer, modified,istransfer,slipno,slipprocessno    FROM delivery.deliveryinfo_transfer    WHERE istransfer = 0  OR istransfer IS NOT NULLLOOPRETURN NEXT v_rec;END LOOP;</code></pre><h2 id="16-截取ip前3段"><a href="#16-截取ip前3段" class="headerlink" title="16.截取ip前3段"></a>16.截取ip前3段</h2><pre><code>split_part(v_network_ip,&apos;.&apos;,1)substring(v_serverip from &apos;[0-9]+.[0-9]+.[0-9]+&apos;)</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat manager</title>
      <link href="/2017/12/25/2017-12-25-tomcat%20manager/"/>
      <url>/2017/12/25/2017-12-25-tomcat%20manager/</url>
      <content type="html"><![CDATA[<p>在无需关闭或重启整个容器的情况下,部署新的Web应用或取消现有应用的部署</p><p>或者,在Tomcat配置文件中没有指定reloadable的情况下,也可以请求重新加载现有应用</p><h2 id="Tomcat中的Web应用Manager就是解决这些问题-默认安装在上线文路径"><a href="#Tomcat中的Web应用Manager就是解决这些问题-默认安装在上线文路径" class="headerlink" title="Tomcat中的Web应用Manager就是解决这些问题,默认安装在上线文路径:"></a>Tomcat中的Web应用Manager就是解决这些问题,默认安装在上线文路径:</h2><pre><code>/manager中    用已上传的WAR文件内容部署新的Web应用    在服务器文件系统中指定上下文路径处部署新的Web应用    列出当前已部署的Web应用,以及当前应用的活跃回话    重新加载现有的Web应用,以便相应?WEB-INF/classes或/WEB-INF/lib中内容的更改    列出操作系统以及JVM的属性值    列出可用的全局JNDI资源    开启一个已经停止的Web应用    停止一个现有的Web应用    取消已经部署的Web应用</code></pre><p>Tomcat默认安装了Manager,讲一个Manager应用实例的Context添加到一个新的主机</p><h2 id="Manager应用的使用方式有三种"><a href="#Manager应用的使用方式有三种" class="headerlink" title="Manager应用的使用方式有三种"></a>Manager应用的使用方式有三种</h2><pre><code>localhost:8080/manager/html只使用htpp请求的一个功能最少的版本用于Ant构建工具的一套方便的任务定义</code></pre><h2 id="配置Manger应用访问"><a href="#配置Manger应用访问" class="headerlink" title="配置Manger应用访问"></a>配置Manger应用访问</h2><pre><code>默认用户文件: $CATALINA_BASE/conf/tomcat-users.xmlmanager-gui:    访问HTML界面manager-status:    访问服务器状态页面manager-script:    访问纯文本界面manager-jmx:    服务器状态页面(Server Status)</code></pre>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat10分钟自检</title>
      <link href="/2017/12/25/2017-12-25-tomcat10%E5%88%86%E9%92%9F%E8%87%AA%E6%A3%80/"/>
      <url>/2017/12/25/2017-12-25-tomcat10%E5%88%86%E9%92%9F%E8%87%AA%E6%A3%80/</url>
      <content type="html"><![CDATA[<h2 id="1-复制tomcat文件到服务器"><a href="#1-复制tomcat文件到服务器" class="headerlink" title="1.复制tomcat文件到服务器"></a>1.复制tomcat文件到服务器</h2><pre><code>/etc/init.d/</code></pre><h2 id="2-修改tomcat文件的CATALINA-HOME"><a href="#2-修改tomcat文件的CATALINA-HOME" class="headerlink" title="2.修改tomcat文件的CATALINA_HOME"></a>2.修改tomcat文件的CATALINA_HOME</h2><h2 id="3-设置tomcat为可执行"><a href="#3-设置tomcat为可执行" class="headerlink" title="3.设置tomcat为可执行"></a>3.设置tomcat为可执行</h2><pre><code>chkconfig --add tomcat</code></pre><h2 id="4-把tomcatmon放到-batch-文件夹下"><a href="#4-把tomcatmon放到-batch-文件夹下" class="headerlink" title="4.把tomcatmon放到/batch/文件夹下"></a>4.把tomcatmon放到/batch/文件夹下</h2><h2 id="5-crontaab-e"><a href="#5-crontaab-e" class="headerlink" title="5.crontaab -e"></a>5.crontaab -e</h2><pre><code>*/10 * * * * /batch/tomcatmon</code></pre>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat创建软连接</title>
      <link href="/2017/12/25/2017-12-25-tomcat%E5%88%9B%E5%BB%BA%E8%BD%AF%E8%BF%9E%E6%8E%A5/"/>
      <url>/2017/12/25/2017-12-25-tomcat%E5%88%9B%E5%BB%BA%E8%BD%AF%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h2 id="一、在项目的META-INF目录中增加context-xml文件"><a href="#一、在项目的META-INF目录中增加context-xml文件" class="headerlink" title="一、在项目的META-INF目录中增加context.xml文件"></a>一、在项目的META-INF目录中增加context.xml文件</h2><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Context path=&quot;/yourApp&quot; allowLinking=&quot;true&quot;&gt;&lt;/Context&gt;</code></pre><h2 id="二、在Tomcat的-conf-Catalina-localhost-目录下增加名字为项目名的XML配置文件。"><a href="#二、在Tomcat的-conf-Catalina-localhost-目录下增加名字为项目名的XML配置文件。" class="headerlink" title="二、在Tomcat的/conf/Catalina/localhost/目录下增加名字为项目名的XML配置文件。"></a>二、在Tomcat的/conf/Catalina/localhost/目录下增加名字为项目名的XML配置文件。</h2><pre><code>创建yourApp.xml文件，文件内容和第一种的文件内容一致，唯一区别在于文件名的不同。</code></pre><h2 id="三、直接在tomcat的配置目录conf-的context-xml文件中增加如下属性"><a href="#三、直接在tomcat的配置目录conf-的context-xml文件中增加如下属性" class="headerlink" title="三、直接在tomcat的配置目录conf/的context.xml文件中增加如下属性"></a>三、直接在tomcat的配置目录conf/的context.xml文件中增加如下属性</h2><pre><code>在&lt;Context/&gt;标签里面增加：</code></pre><p>ß    allowLinking=”true”</p>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat性能优化</title>
      <link href="/2017/12/25/2017-12-25-tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>/2017/12/25/2017-12-25-tomcat%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="1-增加JVM堆内存大小"><a href="#1-增加JVM堆内存大小" class="headerlink" title="1.增加JVM堆内存大小"></a>1.增加JVM堆内存大小</h2><pre><code>1）JVM通常不去调用垃圾回收器，所以服务器可以更多关注处理web请求，并要求尽快完成。2）更改文件(catalina.sh)    JAVA_OPTS=”-Djava.awt.headless=true -Dfile.encoding=UTF-8        -server -Xms1024m -Xmx1024m        -XX:NewSize=512m -XX:MaxNewSize=512m -XX:PermSize=512m        -XX:MaxPermSize=512m -XX:+DisableExplicitGC”    -Xms – 指定初始化时化的栈内存    -Xmx – 指定最大栈内存</code></pre><h2 id="2-修复JRE内存泄漏"><a href="#2-修复JRE内存泄漏" class="headerlink" title="2.修复JRE内存泄漏"></a>2.修复JRE内存泄漏</h2><pre><code>1）最新的tomcat版本6.0.26及以上就可以解决这个错误，因为它包含了一个监听器来处理JRE和PermGen的内存泄漏。2）更改server.xml    &lt;Listener className=“org.apache.catalina.core.JreMemoryLeakPreventionListener” /&gt;</code></pre><h2 id="3-线程池设置"><a href="#3-线程池设置" class="headerlink" title="3.线程池设置"></a>3.线程池设置</h2><pre><code>maxThreads的值应该根据流量的大小，如果值过低，将有没有足够的线程来处理所有的请求，请求将进入等待状态，只有当一个的处理线程释放后才被处理；如果设置的太大，Tomcat的启动将花费更多时间。因此它取决于我们给maxThreads设置一个正确的值。其中和最大连接数相关的参数为maxProcessors 和 acceptCount 。如果要加大并发连接数，应同时加大这两个参数。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=“9027”</span><br><span class="line">       protocol=“HTTP/1.1”</span><br><span class="line">       maxHttpHeaderSize=“8192”</span><br><span class="line">       maxThreads=“1000”</span><br><span class="line">       minSpareThreads=“100”</span><br><span class="line">       maxSpareThreads=“1000”</span><br><span class="line">       minProcessors=“100”  最小空闲连接线程数，用于提高系统处理性能</span><br><span class="line">       maxProcessors=“1000”   最大连接线程数，即：并发处理的最大请求数</span><br><span class="line">       enableLookups=“false”  是否反查域名，取值为： true 或 false 。为了提高处理能力，应设置为 false</span><br><span class="line">       compression=“on”</span><br><span class="line">       compressionMinSize=“2048”</span><br><span class="line">       compressableMimeType=“text/html,text/xml,text/javascript,text/css,text/plain”</span><br><span class="line">       connectionTimeout=“20000”   网络连接超时，单位：毫秒。设置为 0 表示永不超时，这样设置有隐患的。通常可设置为30000 毫秒。</span><br><span class="line">       URIEncoding=“utf-8”</span><br><span class="line">       acceptCount=“1000” 允许的最大连接数，应大于等于 maxProcessors</span><br><span class="line">       redirectPort=“8443”</span><br><span class="line">       disableUploadTimeout=“true”/&gt;</span><br></pre></td></tr></table></figure><h2 id="4-压缩"><a href="#4-压缩" class="headerlink" title="4.压缩"></a>4.压缩</h2><pre><code>compression=“on”compressionMinSize=“2048”当文件的大小大于等于2048bytes时才会压缩</code></pre><h2 id="5-数据库性能调优"><a href="#5-数据库性能调优" class="headerlink" title="5.数据库性能调优"></a>5.数据库性能调优</h2><pre><code>Tomcat性能在等待数据库查询被执行期间会降低确保所有数据库连接正确地关闭。最大空闲数（maxIdle），最大连接数（maxActive）,最大建立连接等待时间（maxWait）属性的值。</code></pre><h2 id="6-其它选项"><a href="#6-其它选项" class="headerlink" title="6.其它选项"></a>6.其它选项</h2><pre><code>开启浏览器的缓存，这样读取存放在webapps文件夹里的静态内容会更快，大大推动整体性能每当开机时，Tomcat服务器应当自动地重启一般情况下HTTPS请求会比HTTP请求慢。如果你想要更好的安全性，即使慢一点我们还是要选择HTTPS</code></pre><h2 id="设置TOMCAT启用GZIP压缩"><a href="#设置TOMCAT启用GZIP压缩" class="headerlink" title="设置TOMCAT启用GZIP压缩"></a>设置TOMCAT启用GZIP压缩</h2><pre><code>compression=”on” 打开压缩功能compressionMinSize=”50″ 启用压缩的输出内容大小，默认为2KBnoCompressionUserAgents=”gozilla, traviata” 对于以下的浏览器，不启用压缩compressableMimeType=”text/html,text/xml,text/javascript,text/css,text/plain“　哪些资源类型需要压缩</code></pre>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sql psql数据类型对比</title>
      <link href="/2017/12/25/2017-12-25-sql%20psql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94/"/>
      <url>/2017/12/25/2017-12-25-sql%20psql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AF%B9%E6%AF%94/</url>
      <content type="html"><![CDATA[<table><thead><tr><th>数据类型</th><th>SQL Server</th><th>PostgreSQL</th><th>备注</th></tr></thead><tbody><tr><td>数字型</td></tr><tr><td></td><td>tinyint</td><td>smallint</td><td>tinyint(0-255),smallint(-32768-32767)</td></tr><tr><td></td><td>smallint</td><td>smallint,int2</td><td>int2是smallint别名</td></tr><tr><td></td><td>int</td><td>int</td></tr><tr><td></td><td>bigint</td><td>bigint</td></tr><tr><td></td><td>decimal</td><td>decimal</td></tr><tr><td></td><td>numeric</td><td>numeric</td></tr><tr><td></td><td>float</td><td>real,float4</td></tr><tr><td></td><td>real</td><td>double precision</td></tr><tr><td>字符型</td></tr><tr><td></td><td>char</td><td>char</td><td>postgresql可以存储n个字符</td></tr><tr><td></td><td>nchar</td><td>char</td></tr><tr><td></td><td>nvarchar</td><td>varchar</td></tr><tr><td></td><td>varchar</td><td>varchar</td></tr><tr><td></td><td>text</td><td>text</td></tr><tr><td></td><td>ntext</td><td>text</td></tr><tr><td>时间</td></tr><tr><td></td><td>datetime</td><td>date</td><td>只是时间</td></tr><tr><td></td><td>datetime</td><td>timestamp</td><td>时间与日期</td></tr><tr><td>货币</td></tr><tr><td></td><td>money</td><td>numeric</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat简介</title>
      <link href="/2017/12/25/2017-12-25-tomcat%E7%AE%80%E4%BB%8B/"/>
      <url>/2017/12/25/2017-12-25-tomcat%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>对应系统管理员及Web开发者来说,在学习tomcat之前应该熟悉一些重要内容</p><h2 id="1-术语"><a href="#1-术语" class="headerlink" title="1.术语"></a>1.术语</h2><pre><code>Context, 上下文就是指Web应用程序Term2 术语2Term3 术语3</code></pre><h2 id="2-目录文件"><a href="#2-目录文件" class="headerlink" title="2.目录文件"></a>2.目录文件</h2><pre><code>$CATALINA_HOME,Tomcat安装的根目录/bin:    存放用于启动及关闭的文件,以及其他脚本/conf:    配置文件,最重要的是server.xml,这是容器的主配置文件/log:    日志文件的默认目录/webapps    存放web应用的相关文件</code></pre><h2 id="3-配置Tomcat"><a href="#3-配置Tomcat" class="headerlink" title="3.配置Tomcat"></a>3.配置Tomcat</h2><pre><code>配置文件中的所有信息在启动时才被读取, 所以改动文件后,必须重启容器才能生效</code></pre>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webSQL使用</title>
      <link href="/2017/12/25/2017-12-25-webSQL%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/12/25/2017-12-25-webSQL%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><pre><code>var db = openDatabase(&quot;trial&quot;, &quot;1.0&quot;, &quot;用户表&quot;, 1024 * 1024);</code></pre><h2 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2.插入数据"></a>2.插入数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.transaction(function (context) &#123;</span><br><span class="line">context.executeSql(CREATE TABLE IF NOT EXISTS users (infoid ,infoname,grade,parent,type,value));</span><br><span class="line">context.executeSql(INSERT INTO users (infoid ,infoname,grade,parent,type,value) VALUES (&quot;history&quot;, &quot;履历&quot;,&quot;1&quot;,&quot;info&quot;,&quot;array&quot;,&quot;&quot;));</span><br><span class="line">context.executeSql(INSERT INTO users (infoid ,infoname,grade,parent,type,value) VALUES (&quot;grade&quot;, &quot;资格&quot;,&quot;1&quot;,&quot;info&quot;,&quot;obj&quot;,&quot;&quot;));</span><br><span class="line">context.executeSql(INSERT INTO users (infoid ,infoname,grade,parent,type,value) VALUES (&quot;japanese&quot;, &quot;日语&quot;,&quot;2&quot;,&quot;grade&quot;,&quot;int&quot;,&quot;1,2,3,4&quot;));</span><br><span class="line">context.executeSql(INSERT INTO users (infoid ,infoname,grade,parent,type,value) VALUES (&quot;english&quot;, &quot;英文&quot;,&quot;2&quot;,&quot;grade&quot;,&quot;text&quot;,&quot;&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">db.transaction( function(context) &#123;</span><br><span class="line">    context.executeSql(UPDATE users SET infoname=? where infoid=?, [&quot;资格2&quot;,&quot;grade&quot;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">## 4.删除</span><br><span class="line"></span><br><span class="line">db.transaction( function(context) &#123;</span><br><span class="line">    context.executeSql(DELETE from users where infoid=?, [&quot;grade&quot;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">## 5.删除表</span><br><span class="line"></span><br><span class="line">db.transaction(function (context) &#123;</span><br><span class="line">    context.executeSql(DROP TABLE users);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">## 6.生成语句</span><br><span class="line"></span><br><span class="line">sql =DELETE from users where infoid=&quot;history&quot;;</span><br><span class="line">sql =INSERT INTO users (infoid ,infoname,grade,parent,type,value) VALUES (&quot;history&quot;, &quot;履历&quot;,&quot;1&quot;,&quot;info&quot;,&quot;array&quot;,&quot;&quot;)</span><br><span class="line"></span><br><span class="line">db.transaction( function(context) &#123;</span><br><span class="line">    context.executeSql(sql);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="7-查询"><a href="#7-查询" class="headerlink" title="7.查询"></a>7.查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sql=SELECT * FROM users WHERE grade=&quot;2&quot;;</span><br><span class="line">obj=[];</span><br><span class="line">db.transaction( function(context) &#123;</span><br><span class="line">    context.executeSql(</span><br><span class="line">        sql, [],</span><br><span class="line">         function(context, result) &#123;</span><br><span class="line">            var rows = result.rows, length = rows.length, i=0;</span><br><span class="line">            for(i; i &lt; length; i++) &#123;</span><br><span class="line">            obj.push(rows.item(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webview开启localstorage</title>
      <link href="/2017/12/25/2017-12-25-webview%E5%BC%80%E5%90%AFlocalstorage/"/>
      <url>/2017/12/25/2017-12-25-webview%E5%BC%80%E5%90%AFlocalstorage/</url>
      <content type="html"><![CDATA[<p>wvBrowser.getSettings().setJavaScriptEnabled(true);</p><p>// 开启DOM缓存。</p><p>wvBrowser.getSettings().setDomStorageEnabled(true);</p><p>wvBrowser.getSettings().setDatabaseEnabled(true);</p><p>wvBrowser.getSettings().setDatabasePath(context.getApplicationContext().getCacheDir().getAbsolutePath());</p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat自检</title>
      <link href="/2017/12/25/2017-12-25-tomcat%E8%87%AA%E6%A3%80/"/>
      <url>/2017/12/25/2017-12-25-tomcat%E8%87%AA%E6%A3%80/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#</span><br><span class="line"># /etc/rc.d/init.d/tomcat</span><br><span class="line"># init script for tomcat precesses</span><br><span class="line">#</span><br><span class="line"># processname: tomcat</span><br><span class="line"># description: tomcat is a j2se server</span><br><span class="line"># chkconfig: 2345 86 16</span><br><span class="line"># description:  Start up the Tomcat servlet engine.</span><br><span class="line"></span><br><span class="line">if [ -f /etc/init.d/functions ]; then</span><br><span class="line">        . /etc/init.d/functions</span><br><span class="line">elif [ -f /etc/rc.d/init.d/functions ]; then</span><br><span class="line">        . /etc/rc.d/init.d/functions</span><br><span class="line">else</span><br><span class="line">        echo -e &quot;/atomcat: unable to locate functions lib. Cannot continue.&quot;</span><br><span class="line">        exit -1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">RETVAL=$?</span><br><span class="line">CATALINA_HOME=&quot;/opt/apache-tomcat-7.0.56&quot;</span><br><span class="line"></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">        if [ -f $CATALINA_HOME/bin/startup.sh ];</span><br><span class="line">          then</span><br><span class="line">            echo $&quot;Starting Tomcat&quot;</span><br><span class="line">            $CATALINA_HOME/bin/startup.sh</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">stop)</span><br><span class="line">        if [ -f $CATALINA_HOME/bin/shutdown.sh ];</span><br><span class="line">          then</span><br><span class="line">            echo $&quot;Stopping Tomcat&quot;</span><br><span class="line">            $CATALINA_HOME/bin/shutdown.sh</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">restart)</span><br><span class="line">        if [ -f $CATALINA_HOME/bin/startup.sh ];</span><br><span class="line">          then</span><br><span class="line">            echo $&quot;Restarting Tomcat&quot;</span><br><span class="line">        $CATALINA_HOME/bin/shutdown.sh</span><br><span class="line">        sleep 5</span><br><span class="line">        pc=`ps -ef | grep catalina.startup.Bootstrap | grep -v grep | wc -l`</span><br><span class="line">        while [ $pc -gt 0 ]</span><br><span class="line">        do</span><br><span class="line">            sleep 1</span><br><span class="line">            pc=`ps -ef | grep catalina.startup.Bootstrap | grep -v grep | wc -l`</span><br><span class="line">        done</span><br><span class="line">        $CATALINA_HOME/bin/startup.sh</span><br><span class="line">        fi</span><br><span class="line">        ;;</span><br><span class="line">*)</span><br><span class="line">        echo $&quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span><br><span class="line">        exit 1</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit $RETVAL</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关闭ipv6</title>
      <link href="/2017/12/25/2017-12-25-%E5%85%B3%E9%97%ADipv6/"/>
      <url>/2017/12/25/2017-12-25-%E5%85%B3%E9%97%ADipv6/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=1</span><br><span class="line">vi /etc/sysconfig/network</span><br><span class="line">NETWORKING_IPV6=no</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ethX</span><br><span class="line">IPV6INIT=no</span><br><span class="line">service network restart</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关闭防火墙</title>
      <link href="/2017/12/25/2017-12-25-%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/"/>
      <url>/2017/12/25/2017-12-25-%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99/</url>
      <content type="html"><![CDATA[<h2 id="1-重启后生效"><a href="#1-重启后生效" class="headerlink" title="1) 重启后生效"></a>1) 重启后生效</h2><pre><code>开启： chkconfig iptables on关闭： chkconfig iptables off</code></pre><h2 id="2-即时生效，重启后失效"><a href="#2-即时生效，重启后失效" class="headerlink" title="2) 即时生效，重启后失效"></a>2) 即时生效，重启后失效</h2><pre><code>开启： service iptables start关闭： service iptables stop</code></pre><h2 id="centos-7："><a href="#centos-7：" class="headerlink" title="centos 7："></a>centos 7：</h2><pre><code>systemctl stop firewalld.service #停止systemctl disable firewalld.service #禁用.</code></pre><h2 id="3-postgres-5432不能连接"><a href="#3-postgres-5432不能连接" class="headerlink" title="3) postgres 5432不能连接"></a>3) postgres 5432不能连接</h2><pre><code>nc -z 192.168.4.224 5432 failiptables属于系统服务，netstat找不到解决方法：iptables -A INPUT -p tcp --dport 5432 -j ACCEPT</code></pre>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>挂载硬盘</title>
      <link href="/2017/12/25/2017-12-25-%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/"/>
      <url>/2017/12/25/2017-12-25-%E6%8C%82%E8%BD%BD%E7%A1%AC%E7%9B%98/</url>
      <content type="html"><![CDATA[<p>mount -t ntfs-3g /dev/sdb1 /mnt/</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>查看sqlite数据库</title>
      <link href="/2017/12/25/2017-12-25-%E6%9F%A5%E7%9C%8Bsqlite%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2017/12/25/2017-12-25-%E6%9F%A5%E7%9C%8Bsqlite%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">run-as com.tre.android.framework(app的package名）</span><br><span class="line">cd databases</span><br><span class="line">ls</span><br><span class="line">sqlite3 pacerplayer.db</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建立外部表</title>
      <link href="/2017/12/25/2017-12-25-%E5%BB%BA%E7%AB%8B%E5%A4%96%E9%83%A8%E8%A1%A8/"/>
      <url>/2017/12/25/2017-12-25-%E5%BB%BA%E7%AB%8B%E5%A4%96%E9%83%A8%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h2 id="建立外部表"><a href="#建立外部表" class="headerlink" title="建立外部表"></a>建立外部表</h2><pre><code>--安装postgres_fdwCREATE EXTENSION postgres_fdw--新建远程数据库create server masterdb foreign data wrapper postgres_fdw options (host localhost,dbname MasterDB,port 5432) ;--新建用户create user mapping FOR postgres server masterdb options (user postgres,password sa) ;--建立外部表CREATE FOREIGN TABLE branches   (branchcd integer ,    branchname character varying(64) ,    branchtype integer NOT NULL)   SERVER masterdb;</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>获取MAC地址</title>
      <link href="/2017/12/25/2017-12-25-%E8%8E%B7%E5%8F%96MAC%E5%9C%B0%E5%9D%80/"/>
      <url>/2017/12/25/2017-12-25-%E8%8E%B7%E5%8F%96MAC%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;&gt;&lt;/uses-permission&gt;</span><br><span class="line"></span><br><span class="line">WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);</span><br><span class="line">WifiInfo info = wifi.getConnectionInfo();</span><br><span class="line">return info.getMacAddress();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>高可用性方案</title>
      <link href="/2017/12/25/2017-12-25-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E6%96%B9%E6%A1%88/"/>
      <url>/2017/12/25/2017-12-25-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="高可用框架基础"><a href="#高可用框架基础" class="headerlink" title="高可用框架基础"></a>高可用框架基础</h2><pre><code>多个数据库协同工作，一台失效，另一台顶替几台数据库同时提供服务，用户可用访问任意一台数据库数据同步是高可用方案的基础</code></pre><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><pre><code>共享磁盘    SAN存储，一台机器失效，把SAN挂到另一台机器WAN日志同步，流复制    postgres自身提供，搭建主从服务器触发器    使用触发器几率数据变化，同步到另一台数据库可复制中间件    用户不连数据库，连中间件，中间件把语句发给多台数据库改造postgres源码    修改postgres源码来截取数据库变更，同步到另一台数据库</code></pre><h2 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h2><pre><code>主备方式    数据同步：故障切换中，数据完全不丢失    数据异步：性能高，网络中断（主机挂起）    保证服务中断的时间尽量少，灵敏故障检测，防误触发数据    硬件故障、软件bug、人为失误</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>负载平衡</title>
      <link href="/2017/12/25/2017-12-25-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1/"/>
      <url>/2017/12/25/2017-12-25-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1/</url>
      <content type="html"><![CDATA[<p>浏览器    –&gt;     nginx    –&gt;   Tomcat</p><h2 id="1-代理转发"><a href="#1-代理转发" class="headerlink" title="1.代理转发"></a>1.代理转发</h2><pre><code>location / {    # root html;    index index.html index.htm;    proxy-pass http://192.168.1.62:8080; #代理转发}</code></pre><h2 id="2-nginx策略"><a href="#2-nginx策略" class="headerlink" title="2.nginx策略"></a>2.nginx策略</h2><pre><code>nginx  --&gt;   策略   Tomcat1                    Tomcat2                    Tomcat3</code></pre><p>1）策略</p><pre><code>多个服务器，形成服务器组指定转给组策略决定发给谁</code></pre><p>2）一组服务器</p><pre><code>upstream tomcats{    server    192.168.1.62:8080;    server     192.168.1.63:8080;}</code></pre><p>3）策略</p><pre><code>默认：    轮询，1,2,1,2backup:    只有非备份机都挂机，才启动dwon:    当前服务器停止（暂时停机维护）max-fails:        最大失败次数fail-timeout:    挂机多长时间再尝试1.weight 权重    server 192.168.1.64:8080 weight=5; #指定权重2.ip_hash    客户端ip_hash运算，用户锁定在服务器    权重失效3.fail    根据服务器当前性能，动态分配4.url_hash    请求url，hash运算，相同url访问同一服务器    做缓存服务器，每个商品都是独一的    每个服务器缓存不同商品        加快访问速度</code></pre>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pgpool命令</title>
      <link href="/2017/12/25/2017-12-25-pgpool%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/12/25/2017-12-25-pgpool%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="查询锁："><a href="#查询锁：" class="headerlink" title="查询锁："></a>查询锁：</h2><pre><code>SELECT    locked.pid AS locked_pid,    locker.pid AS locker_pid,    locked_act.usename AS locked_user,    locker_act.usename AS locker_user,    locked.virtualtransaction,    locked.transactionid,    relnameFROM    pg_locks locked    LEFT OUTER JOIN pg_class ON (locked.relation = pg_class.oid),    pg_locks locker,    pg_stat_activity locked_act,    pg_stat_activity locker_actWHERE    locker.granted=true AND    locked.granted=false AND    locked.pid=locked_act.pid AND    locker.pid=locker_act.pid AND    locked.relation=locker.relation;---------------------select * from pg_stat_activity aa,(    select a.locktype,a.database,a.pid,a.mode,a.relation,b.relname from pg_locks a join pg_class b on a.relation=b.oid where upper(b.relname)=FX_WDSJ_DSZH) bbwhere aa.pid=bb.pid and aa.waiting=t</code></pre><h2 id="–查询是否锁表了"><a href="#–查询是否锁表了" class="headerlink" title="–查询是否锁表了"></a>–查询是否锁表了</h2><pre><code>select pid from pg_locks where relation=(select oid from pg_class where relname=表); tb_cyplate_localitycheck</code></pre><h2 id="查询proc："><a href="#查询proc：" class="headerlink" title="查询proc："></a>查询proc：</h2><pre><code>select proname --, prosrcfrom pg_proc where LOWER(prosrc) like %join% and CHAR_LENGTH(prosrc) ##  100;</code></pre><h2 id="查询连接："><a href="#查询连接：" class="headerlink" title="查询连接："></a>查询连接：</h2><pre><code>SELECT * FROM pg_stat_activity</code></pre><h2 id="查询正在执行的语句："><a href="#查询正在执行的语句：" class="headerlink" title="查询正在执行的语句："></a>查询正在执行的语句：</h2><pre><code>select * from pg_stat_activity where waiting=t;kill pid：select pg_cancel_backend(16023);select  pg_terminate_backend(16023);</code></pre><h2 id="查询备机延迟："><a href="#查询备机延迟：" class="headerlink" title="查询备机延迟："></a>查询备机延迟：</h2><pre><code>select now()-pg_last_xact_replay_timestamp()</code></pre><h2 id="查询备机："><a href="#查询备机：" class="headerlink" title="查询备机："></a>查询备机：</h2><pre><code>select * from pg_stat_replication;/opt/postgres/9.3/bin/psql -U postgres -p 5432 -c &quot;select * from pg_stat_replication;&quot;</code></pre><h2 id="查询语句log："><a href="#查询语句log：" class="headerlink" title="查询语句log："></a>查询语句log：</h2><pre><code>select * from pg_stat_statementswhere query like %tttt%;</code></pre><h2 id="清除语句log："><a href="#清除语句log：" class="headerlink" title="清除语句log："></a>清除语句log：</h2><pre><code>SELECT pg_stat_statements_reset();</code></pre><h2 id="显示同步备机名："><a href="#显示同步备机名：" class="headerlink" title="显示同步备机名："></a>显示同步备机名：</h2><pre><code>show synchronous_standby_namespgagent:/opt/pgagent/bin/pgagent hostaddr=localhost dbname=postgres user=postgrespgpool:/opt/postgres/9.3/bin/psql -U postgres -p 9999 -c &quot;show pool_nodes;&quot;</code></pre><h2 id="查看主pgpool"><a href="#查看主pgpool" class="headerlink" title="查看主pgpool"></a>查看主pgpool</h2><pre><code>pcp_watchdog_info 10 10.2.4.90 9898 postgres sapcp_watchdog_info 10 10.2.4.90 9898 postgres sa 0</code></pre><h2 id="添加pgpool节点"><a href="#添加pgpool节点" class="headerlink" title="添加pgpool节点"></a>添加pgpool节点</h2><pre><code>pcp_attach_node  10  localhost  9898  postgres  sa  0</code></pre><h2 id="删除pgpool节点"><a href="#删除pgpool节点" class="headerlink" title="删除pgpool节点"></a>删除pgpool节点</h2><pre><code>pcp_detach_node  10  localhost  9898  postgres  sa  0</code></pre><h2 id="停止pgpool"><a href="#停止pgpool" class="headerlink" title="停止pgpool"></a>停止pgpool</h2><pre><code>pcp_stop_pgpool  10  localhost  9898  postgres  sa  spcp_stop_pgpool  10  localhost  9898  postgres  sa  fpcp_stop_pgpool  10  localhost  9898  postgres  sa  i</code></pre>]]></content>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>环境变量path误删解决办法</title>
      <link href="/2017/12/25/2017-12-25-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E8%AF%AF%E5%88%A0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2017/12/25/2017-12-25-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8Fpath%E8%AF%AF%E5%88%A0%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="1-打开注册表"><a href="#1-打开注册表" class="headerlink" title="1.打开注册表"></a>1.打开注册表</h3><p>Win+R 输入regedit打开注册表(开始-运行里输入regedit）</p><p>找到  HKEY_LOCAL_MACHINE\SYSTEM\ControlSet002\Control\Session Manager\Environment下，</p><h3 id="2-新建path"><a href="#2-新建path" class="headerlink" title="2.新建path"></a>2.新建path</h3><p>右边找到path，把数值复制到HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\Environment下，</p><p>若没有path可以新建,然后把值对应复制进去.</p>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio显示行数</title>
      <link href="/2017/12/25/2017-12-25-Android%20Studio%E6%98%BE%E7%A4%BA%E8%A1%8C%E6%95%B0/"/>
      <url>/2017/12/25/2017-12-25-Android%20Studio%E6%98%BE%E7%A4%BA%E8%A1%8C%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="打开setting，输入line检索，勾选Show-line-numbers"><a href="#打开setting，输入line检索，勾选Show-line-numbers" class="headerlink" title="打开setting，输入line检索，勾选Show line numbers"></a>打开setting，输入line检索，勾选Show line numbers</h3><p><img src="http://img.blog.csdn.net/20170307215601757?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGVsbG9fenln/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
      
      
        <tags>
            
            <tag> androidstudio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio修改logcat行数</title>
      <link href="/2017/12/25/2017-12-25-Android%20Studio%E4%BF%AE%E6%94%B9logcat%E8%A1%8C%E6%95%B0/"/>
      <url>/2017/12/25/2017-12-25-Android%20Studio%E4%BF%AE%E6%94%B9logcat%E8%A1%8C%E6%95%B0/</url>
      <content type="html"><![CDATA[<h3 id="修改logcat的缓存大小"><a href="#修改logcat的缓存大小" class="headerlink" title="修改logcat的缓存大小"></a>修改logcat的缓存大小</h3><pre><code>#bin\idea.propertiesvi /Applications/DataGrip.app/Contents/bin/idea.properties    idea.cycle.buffer.size=1024    替换为    idea.cycle.buffer.size=102400</code></pre>]]></content>
      
      
        <tags>
            
            <tag> androidstudio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ADB常用命令</title>
      <link href="/2017/12/06/2017-12-06-ADB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/12/06/2017-12-06-ADB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote><p>最近更新: 常用命令增加，忽略特殊文件。</p></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">1.通过包名启动apk</span><br><span class="line">    adb shell monkey -p 包名 -c android.intent.category.LAUNCHER 1</span><br><span class="line">2.通过包名结束程序</span><br><span class="line">    adb shell am force-stop  com.tre.android.framework            </span><br><span class="line">3.查看手机上应用的包名</span><br><span class="line">    adb shell pm list packages</span><br><span class="line">4.列出某个包名的详细信息</span><br><span class="line">    adb shell dumpsys package com.tre.android.xxx</span><br><span class="line">5.列出系统所有属性</span><br><span class="line">    adb shell getprop </span><br><span class="line">6.查看序列号</span><br><span class="line">    adb shell getprop | find <span class="string">"ro.serialno"</span></span><br><span class="line">7.启动service</span><br><span class="line">    adb shell am startservice --user 0 -a pacer.autoupdatenew.service</span><br><span class="line">8.唤醒屏幕</span><br><span class="line">    adb shell input keyevent 26;adb shell input keyevent 82    </span><br><span class="line">9.截屏</span><br><span class="line">    adb shell /system/bin/screencap -p /sdcard/screenshot_temp.png &amp;&amp; adb pull /sdcard/screenshot_temp.png /Users/yongguangzhang/Desktop    </span><br><span class="line">10.logcat日志导出</span><br><span class="line">    adb logcat -v time &gt; ./2017年12月6日.<span class="built_in">log</span></span><br><span class="line">11.手机文件复制到电脑</span><br><span class="line">    adb pull /storage/emulated/legacy/<span class="built_in">log</span>/20170304.log ./</span><br><span class="line">12.电脑文件复制到手机</span><br><span class="line">    adb push ./AutoUpdateConfig.txt /storage/emulated/legacy/</span><br><span class="line">13.发送关机广播</span><br><span class="line">    adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</span><br><span class="line">14.更精确的发送到某个package</span><br><span class="line">    adb shell am broadcast -a android.intent.action.BOOT_COMPLETED -c android.intent.category.HOME -n com.morlunk.mumbleclient/com.morlunk.mumbleclient.app.PlumbleActivity    </span><br><span class="line">15.无线连接失败，插入数据线,执行</span><br><span class="line">    adb tcpip 5555</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git指令整理</title>
      <link href="/2017/02/15/2017-02-15-Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2017/02/15/2017-02-15-Git%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote><p>随便整理的一些自用的Git指令</p></blockquote><h1 id="GitHub创建仓库提示代码"><a href="#GitHub创建仓库提示代码" class="headerlink" title="GitHub创建仓库提示代码"></a>GitHub创建仓库提示代码</h1><pre><code>echo &quot;# 项目名&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin git@github.com:qiubaiying/项目名.gitgit push -u origin master</code></pre><p>若仓库存在直接push</p><pre><code>git remote add origin git@github.com:qiubaiying/test.gitgit push -u origin master</code></pre><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h4 id="创建仓库（初始化）"><a href="#创建仓库（初始化）" class="headerlink" title="创建仓库（初始化）"></a>创建仓库（初始化）</h4><pre><code>在当前指定目录下创建git init新建一个仓库目录git init [project-name]克隆一个远程项目git clone [url]</code></pre><h4 id="添加文件到缓存区"><a href="#添加文件到缓存区" class="headerlink" title="添加文件到缓存区"></a>添加文件到缓存区</h4><pre><code>添加所有变化的文件 git add .添加名称指定文件git add text.txt</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><pre><code>设置提交代码时的用户信息git config [--global] user.name &quot;[name]&quot;git config [--global] user.email &quot;[email address]&quot;</code></pre><h4 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h4><pre><code>提交暂存区到仓库区git commit -m &quot;msg&quot;# 提交暂存区的指定文件到仓库区$ git commit [file1] [file2] ... -m [message]# 提交工作区自上次commit之后的变化，直接到仓库区$ git commit -a# 提交时显示所有diff信息$ git commit -v# 使用一次新的commit，替代上一次提交# 如果代码没有任何新变化，则用来改写上一次commit的提交信息$ git commit --amend -m [message]# 重做上一次commit，并包括指定文件的新变化$ git commit --amend [file1] [file2] ...</code></pre><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><pre><code># 下载远程仓库的所有变动$ git fetch [remote]# 显示所有远程仓库$ git remote -v# 显示某个远程仓库的信息$ git remote show [remote]# 增加一个新的远程仓库，并命名$ git remote add [shortname] [url]# 取回远程仓库的变化，并与本地分支合并$ git pull [remote] [branch]# 上传本地指定分支到远程仓库$ git push [remote] [branch]# 强行推送当前分支到远程仓库，即使有冲突$ git push [remote] --force# 推送所有分支到远程仓库$ git push [remote] --all</code></pre><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><pre><code># 列出所有本地分支$ git branch# 列出所有远程分支$ git branch -r# 列出所有本地分支和远程分支$ git branch -a# 新建一个分支，但依然停留在当前分支$ git branch [branch-name]# 新建一个分支，并切换到该分支$ git checkout -b [branch]# 新建一个分支，指向指定commit$ git branch [branch] [commit]# 新建一个分支，与指定的远程分支建立追踪关系$ git branch --track [branch] [remote-branch]# 切换到指定分支，并更新工作区$ git checkout [branch-name]# 切换到上一个分支$ git checkout -# 建立追踪关系，在现有分支与指定的远程分支之间$ git branch --set-upstream [branch] [remote-branch]# 合并指定分支到当前分支$ git merge [branch]# 选择一个commit，合并进当前分支$ git cherry-pick [commit]# 删除分支$ git branch -d [branch-name]# 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</code></pre><h4 id="标签Tags"><a href="#标签Tags" class="headerlink" title="标签Tags"></a>标签Tags</h4><pre><code>添加标签 在当前commitgit tag -a v1.0 -m &apos;xxx&apos; 添加标签 在指定commitgit tag v1.0 [commit]查看git tag删除git tag -d V1.0删除远程taggit push origin :refs/tags/[tagName]推送git push origin --tags拉取git fetch origin tag V1.0新建一个分支，指向某个taggit checkout -b [branch] [tag]</code></pre><h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><pre><code># 显示有变更的文件$ git status# 显示当前分支的版本历史$ git log# 显示commit历史，以及每次commit发生变更的文件$ git log --stat# 搜索提交历史，根据关键词$ git log -S [keyword]# 显示某个commit之后的所有变动，每个commit占据一行$ git log [tag] HEAD --pretty=format:%s# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件$ git log [tag] HEAD --grep feature# 显示某个文件的版本历史，包括文件改名$ git log --follow [file]$ git whatchanged [file]# 显示指定文件相关的每一次diff$ git log -p [file]# 显示过去5次提交$ git log -5 --pretty --oneline# 显示所有提交过的用户，按提交次数排序$ git shortlog -sn# 显示指定文件是什么人在什么时间修改过$ git blame [file]# 显示暂存区和工作区的差异$ git diff# 显示暂存区和上一个commit的差异$ git diff --cached [file]# 显示工作区与当前分支最新commit之间的差异$ git diff HEAD# 显示两次提交之间的差异$ git diff [first-branch]...[second-branch]# 显示今天你写了多少行代码$ git diff --shortstat &quot;@{0 day ago}&quot;# 显示某次提交的元数据和内容变化$ git show [commit]# 显示某次提交发生变化的文件$ git show --name-only [commit]# 显示某次提交时，某个文件的内容$ git show [commit]:[filename]# 显示当前分支的最近几次提交$ git reflog</code></pre><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><pre><code># 恢复暂存区的指定文件到工作区$ git checkout [file]# 恢复某个commit的指定文件到暂存区和工作区$ git checkout [commit] [file]# 恢复暂存区的所有文件到工作区$ git checkout .# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变$ git reset [file]# 重置暂存区与工作区，与上一次commit保持一致$ git reset --hard# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变$ git reset [commit]# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致$ git reset --hard [commit]# 重置当前HEAD为指定commit，但保持暂存区和工作区不变$ git reset --keep [commit]# 新建一个commit，用来撤销指定commit# 后者的所有变化都将被前者抵消，并且应用到当前分支$ git revert [commit]# 暂时将未提交的变化移除，稍后再移入$ git stash$ git stash pop</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><pre><code># 生成一个可供发布的压缩包$ git archives</code></pre>]]></content>
      
      <categories>
          
          <category> 版本管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
